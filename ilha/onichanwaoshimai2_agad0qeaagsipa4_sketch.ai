%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 24.1.1
%%For: (Overflow Cat) ()
%%Title: (onichanwaoshimai2_agad0qeaagsipa4_sketch.ai)
%%CreationDate: 7/13/2020 8:21 PM
%%Canvassize: 16383
%%BoundingBox: 51 139 563 652
%%HiResBoundingBox: 51 139 563 651
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([\714\727\660\746\711\653])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 8.36221 -24.9751 603.6822 816.9449
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -611 854 1 1848 901 26 0 0 67 124 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 13814 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0BFFA852FD1AFF27FD4FFF5252FD12FF277DFD19FFA852A8FD4F
%FF27A8FD10FF5227FD1BFF52FD3BFFA8FD14FF7D27FD0FFF27F8A8FD1AFF
%7D52FD3BFFA87DFD14FF277DFD0DFF27F852FD1BFFA852FD3CFF52A8FD13
%FF7D52FD0BFFA827F8F8A8FD0FFFA8A8FD0AFF7D7DFD3CFFA852FD14FF27
%A8FD09FFA827527D52FD10FFA8A8FD0AFF7D7DFD3DFF52A8FD13FFA827FD
%08FFA8277DFFF8A8FD10FFA8FD0BFF527DFD3EFF52FD14FF2752FD06FFA8
%52A8FF7D52FD10FFA8FD0CFF7D7DFD3EFFA87DFD13FF7DF87DFD04FF7D27
%A8FFFF52A8FD0FFFA8A8FD0CFF52A8FD3FFF52A8FD13FFF8F87DFFFF5252
%FFFFFFA827FD10FFA8A8FD0CFF52A8FD3FFF7D7DFD13FF52F8F8A8277DFD
%04FF277DFD10FF7DFD0DFF52A8FD40FF52FD13FF7D27F827A8FD04FFA852
%FD10FF7DA8FD0DFF52A8FD40FF7D7DFD13FF27A8F8FD05FF5252FD0FFFA8
%7DFD0EFFF8FD41FFA852FD13FF277DFD06FFF8A8FD0FFFA87DFD0DFF7DF8
%A8FD41FF52A8FD12FF5252FD05FF5227FD10FF52A8FD0DFF27F8FD1DFF7D
%7DFD23FFA852FD12FFA827FD05FF2752FD10FF7DFD0DFF7DF827FD1DFF7D
%27FD24FF52A8FD12FF27A8FFFFFFA8F8A8FD0FFFA852FD0DFFF8F827FD1D
%FF52F8A8FD23FF527DFD12FF277DFFFFFFA827FD10FF7DA8FD0CFF522752
%27FD1DFF52F8A8FD23FFA852FD12FF5252FFFFFF7D27FD10FF52A8FD0BFF
%A8F87DA8F8FD1DFF27F827FD23FFA852A8FD11FF527DFFFFFF527DFD10FF
%52FD0CFF5252FFA827FD1DFF527D27A8FD23FF52A8FD11FFA87DFFFFFF52
%7DFD0FFF7D7DFD0BFFA8F8FFFFFFF8FD1DFFF8FF277DFD23FF7D52FD11FF
%A827FFFFFF27FD10FF7D7DFD0BFF277DFFFFFF27A8FD1BFFA827FFA827FD
%23FF7D52FD12FFF8FFFFA852FD10FF27A8FD0AFF7D27FD04FF27A8FD1BFF
%7D27FFFF52A8FD11FFA8A8FD0FFFA827FD12FF27FFFFA852FD10FF52FD0B
%FF527DFD04FF52A8FD1BFF5252FFFF7D7DFD12FF7DFD10FF52A8FD11FF27
%FFFF7D7DFD0FFFA852FD0AFFA827FD05FF52A8FD1BFF5252FFFFFF27FD12
%FF7DA8FD0FFF27A8FD11FF52FFFF7DA8FD0FFF7D7DFD0AFF527DFD05FFA8
%7DFD1BFF27A8FFFFFF527DFD11FF7DFD10FF7D7DFD11FF52FFFF27FFFFFF
%A8A8FD0BFF7D7DFD09FFA852FD06FF7D7DFD1AFFA827A8FFFFFF7D52FD11
%FFA87DFD0FFF5252FD11FF52FFA852FFFFFFA8A8FD0BFF7DA8FD09FF7D52
%FD07FF7DFD1AFFA852FD05FF27FD12FF7DFD0FFFA852FD11FF52FFA852FF
%FFFF7DFD0CFF7DA8FD09FF27FD07FFA87DFD1AFF7D7DFD05FF7D52FD11FF
%7DA8FD0EFFA852FD11FF7DFF7D7DFFFFA87DFD0CFF52FD09FF7D52FD08FF
%7DFD1AFF7D7DFD06FF27A8FD10FFA87DFD0FFF52FD11FF52FF7D52FFFFA8
%7DFD0BFFA87DA8FD08FF527DFD08FF7DA8FD19FF52A8FD06FF527DFD10FF
%A87DFD0EFFA852A8FD10FF7DFF7D7DFFFFA8A8FD0CFF52FFFFA87DA8A8FF
%FFFF52FD09FF7DFD19FFA852FD08FF27FD11FF7DFD0FFF52FD11FF7DFF7D
%7DFFFFA8A8FD0BFFA87DFFFFFFA85252527D2727FD09FF7DA8FD18FFA852
%FD08FF527DFD10FF7DA8FD0EFF7D7DFD10FFA8FF52A8FFFF7DFD0DFF7DFD
%07FFA827527D7D7D527D7DA8A8FFA8A8FD04FFA8A8FD12FF7DA8FD08FFA8
%52FD10FF7DFD0FFF7DA8FD12FF52A8FFFF7DA8FD0BFFA87DFD07FFA852FF
%FFFFA8A87D7D527D525227A852A8FFA87DFD12FF52A8FD09FF527DFD0FFF
%A87DFD0EFF7D7DFD12FF27FFFFFF7DFD0DFF7DFD07FF52A8FD0AFFA87DFF
%FFA8FFFF7DFD12FF52FD0BFF52FD0FFFA8A8FD0EFF7D7DFD12FF52A8FFFF
%7DA8FD0BFFA8A8FD06FFA852FD0CFF7DFD05FF7DA8FD0EFFA8FFA87DFD0B
%FF7D52FD0EFFA87DFD0EFFA852FD12FF27FFFFFF7DFD0DFFA8FD06FF7D52
%FD0CFF7DA8FD04FF7D7DFD0FFF7DA8A8FD0CFF52A8FD0DFFA87DFD0EFFA8
%7DFD11FFA827A8FF7D52FD0CFFA8A8FD06FF27A8FD0CFF7DA8FD04FF2752
%FD0FFFA8F85252FD0BFF7D7DFD0EFF7DFD0FFF52FD12FF27FFFF7D52FD0D
%FFA8FD05FFA852FD0EFF7DFD04FF52F8FD0FFFA87DFFA852527DA8A8FD07
%FF52FD0EFFA8A8FD0EFF7DFD11FFA827FFFF2752FD0CFFA8A8FD05FF7D52
%FD0DFFA87DFD04FF52F87DFD0EFFA87DFFFFFFA8FFA87D527D527D7DA8FF
%A852FD0DFFA8FD0FFF52FD11FFA827FFFFF852FD0DFFA8FD05FF27FD0FFF
%52FD04FF52F852FD0EFF52FD09FFA8A87D7D527DA8527DFD0CFFA8FD0FFF
%7DFD10FFA87D27FF7DF852FD12FFA852FD0FFF7D7DFFFFFF27F8F8FD0DFF
%A87DFD0EFFA8FFA8277DA87D7D7DA8A8FD05FF7DFD0FFF52FD10FFA8A827
%FF527D52FD12FF7D7DFD0FFFA87DFFFFFF5252277DFD0CFFA87DFD11FF7D
%7DFFFFA8FF7D7D7DA8FFFFFFA8FD0FFF7DA8FD0FFF7D7D527D527D7DFD12
%FF52FD11FF52FFFFFF27A85227FD0CFF52FD13FF27A8FD06FFA8FFFFFF7D
%FD0FFF52FD10FF7DA852527DFF52FD11FFA87DFD11FF7DA8FFFF527DFFF8
%FD0BFFA852FD14FF27FD0AFFA8FD0FFF52A8FD0FFF7D7D2727FFA87DFD0C
%FFA8A8FFFFFF7DA8FD09FFA8FD07FF7D7DFFFF277DFF5252FD09FFA87D7D
%FD14FF7D52FD09FF7DFD0FFF52A8FD0FFF7DA8F852FFFF7DFD0DFFA8FFFF
%FFA8FD0AFFA87DA8FD06FF7DFFFF527DFFA827FD09FFA827FD16FF52A8FD
%08FFA8FD0FFF52A8FD0FFF7DA8F87DFFFF7DA8FD0CFFA8FD04FFA8FD0BFF
%A8FD06FF7DA8FF527DFFFF277DFD08FFF852FD16FFA852FD08FFA8FD0FFF
%52A8FD0FFF7DA8F8FFFFFF7DFD0DFF7DFD04FFA8F8FD04277D7DA8A8FD09
%FF7DA8FF7D7DFFFFA827FD08FF27A8FD17FF7D52FD17FF52A8FD0FFFA8A8
%7DFFFFFF7DA8FD0CFFA8A8FF7DFF27FD0AF852527DA8FD04FFA87DFF527D
%FFFFFF527DFD07FF52FD19FF277DFD16FF27A8FD0FFFA8FD05FF7DA8FD0C
%FF7DFFA8A827FD0EF827277DA8FFFF7DFF7D52FFFFFFA852FD06FFA87DFD
%1AFF27FD16FF7DA8FD15FFA87DFD0CFFA8A8A87D7D27FD047D522727FD0A
%F827FF7DA87D52FD04FF527DFD06FF7DFD1AFFA827FD15FF52FD16FFA87D
%FD0CFFA8A87DFD0BFFA852FD08F852FF7DA852FD05FF27FD05FFA8A8FD1B
%FF7D52FD14FF52A8FD16FF7DFD0CFFA87D52A8FD0CFFFD09F8A87D7D52FD
%05FF7D27FD04FFA87DFD1CFF527DFD13FF52A8FD16FF7DFD0CFFA85227FD
%09FFA8FFFFA8FD05F827A87D27FFA8A852FD06FF527DFFFFFFA8A8FD05FF
%A87D7DA8FD13FFA852A8FD12FF522752A8FD14FF7DA8FFFFA8FD09FF27F8
%FD09FF27FD09F87DFD04FFA852A8FD05FFA827A8FFFFA87DFFFFFFA852FD
%05F827277D7DA8A8FD0DFF7D27FFFF7DFD0FFF52A87D277DFD13FFA87DFF
%A8A8FD09FF52F8FD09FF27F8F8522752A852F8F8F8FD05FF52FD07FF7D52
%FFFF7DA8FFFFA8FD0CF827277D7DA8FD0AFF7D7DA8A8FD0FFFA8FFFF7D27
%FD13FFA87DFFFF7DFD09FF52F87DFD08FF52F827525252A827F8F8F87DFF
%FFFFA852A8FD07FF277DFFA8A8FFFFA87D7D5227FD0DF827277DA8FD07FF
%27527DFD0FFF27FFFFFF5252FD13FF52FFFFA87DFD08FFA8F87DFD08FF52
%F8277D2752FD05F87DFD04FFA8FD09FF27A87DA8FD08FFA8A87D7D2727FD
%0BF8527DA8FD04FFF8A8FD0FFF277DFFFFFF27FD13FF7D7DFFA87DFD08FF
%A8F827FD08FF7DF852525227FD05F827FD0EFFA82752A8FD0EFFA8FD0DF8
%277DFFFF52A8FD0FFF27F8A8FFFF5252FD12FFA852FFFF7DA8FD08FF2727
%FD08FFA8F827522752FD05F827FD0FFFA8F8FD0FFFA8FD07F82752FD06F8
%A8FF7DFD10FF7D7D52FFFF7D27FD13FF27A8FFA827FD08FF52F8A8FD08FF
%F8FD0527FD05F8FD10FFA8A8FD0BFF52525227F8527D52F8F8F87DFFFF7D
%52F8F8F827A8A8FD10FF52FF52A8FFFFF8FD13FF7D7DFFFF277DFD07FF7D
%F87DFD08FF52F852F82727FD04F827FD1DFF52F852F87D7D272752F8F827
%FD05FFA87D52FFA8FD10FF7DFFFF7DFFFF52A8FD12FFA852FFFFF827FD07
%FFA8F852FD08FF52F82727F8522752F8F8F8FD1DFF275252277DF8F8F827
%27F8F8A8FD07FF7DA8FD10FF52FFA87DFFFF527DFD13FF52A8FF27F87DFD
%07FF2727FD08FFA8F8F852F8F8A8A8F8F827FD1DFF52F852527DF87DF827
%27F8F8A8FD07FF52A8FD0FFFA87DFFFFA8FFFF7D7DFD13FFA852FFF827F8
%A8FD06FF52F8A8FD08FF27F82727F8F827F8F827FD1DFF52F8F87D272727
%F8F827F8F852FD07FF27FD10FFA827FFFFFFA8FF7D7DFD14FF7D7D52FF52
%F8FD06FFA8F8A8FD08FF52F8F8525227F8F8F87DFD1DFF7DF8F87D272727
%F8F82752F87DFD06FFA87DFD04FFA8FD0BFFA827FD05FFA852FD14FF7D27
%27FFFF5227FD05FFA8F852FD08FFA8F8F8F8272727F8F8A8FD1DFF7DF8F8
%7DFD0427F82752F852FD06FF7D7DFFFFFFA8A8FD0BFFA852FD05FF7D7DFD
%15FFF827FFFFA8F852FD05FF2752FD09FF7DFD05F827A8FD1FFFF8F82727
%27FF7DF8F852F852FD06FF52FD04FF7DFD0CFF7D7DFD05FFA852FD15FF7D
%27FFFFA8525252FD04FF7DF8FD0AFF7D27272752A8FD1FFFA827FD04F87D
%27F8F827F852FD05FFA852FFFFFF7D7DFD0CFF7D52FF7DFFFFFF527DFD16
%FFA8FFFFA87DFF5252FD04FF27A8FD2FFF27F8F827F8F8F852F827F87DFD
%05FFA87DFFFFFF52FD0DFF7D7DA8A8FFFFFF7D7DFD19FF7D27FFFF2752FF
%FFFF527DFD2FFF52FD05F87D52F8F8F8A8FD05FF52A8FFFF527DFD0DFF7D
%7DA87DFFFFFF27A8FD19FF7D52FFFFFF5252FFFFA852FD2FFFA8FD04F87D
%7DF8F8F827FD05FFA852FFFF7D27FD0EFF52A87DA8FFFFA827FD1AFF7D52
%FD04FF5227FFFF52A8FD2FFF52FD08F8A8FD05FF7D52FFFF2727FD0EFF52
%7D7DFFFFFF7D52FD1AFF527DFD05FFA827A8A87DFD30FF27FD06F87DFD06
%FF52FFFF52527DFD0EFF52527DFFFFFF52FD1BFF7D52FD07FF275227FD31
%FF7D27F82727A8FD06FFA852FF7D52FF52FD0EFF2727FFFFFF527DFD1BFF
%527DFD08FF27F852FD3CFF7D7DA827FFA87DFD0EFF27A8FFFFFF277DFD1B
%FF527DFD08FF7D7DA8A8FD3BFF52A827A8FF7D52FD0DFFA852FFFFFF52F8
%7DFD1BFFF8A8FD08FF52A8FD3CFF7D7D52A8FFFF7D7DFD0EFF52FFFFA8F8
%F852FD1AFFA8F8A8FD08FF7D52FD3CFF52F8A8FFFFFF7D52FD0DFF7D52FF
%A8F8F8F827FD1AFFA8F8FD09FF7D7DFD3BFFA8F8A8FD04FF527DFD0DFF7D
%7DFF27F8F827F8A8FD19FF7D27FD09FFA827FD3BFF27A8FD05FF527DFD0D
%FF527D27FD05F852FD19FFA827FD0AFF52A8FD39FFA8FD07FF27FD0EFF7D
%FD05F827F852FD19FF5252FD0AFF5252FD41FF27A8FD0DFF52FD08F8A8FD
%18FF5252FD0BFFF8A8FD40FF27FD0EFF52FD08F852FD18FFF87DFD0BFF7D
%F8FD3FFF7D52FD0EFFFD09F827FD18FF277DFD0CFF5252FD3EFF7D52FD0D
%FFA827FD07F827F8A8FD17FF27A8FD0CFFA8F852FD34FFA87DFD07FF277D
%FD0DFFA8FD08F8272727FD16FF7D27FD0EFFF8F87DFD33FFA852A8FD05FF
%7DF87DFD0DFF7DFD06F8272752F8F8A8FD15FFA827FD0DFFA8F8F8F852FD
%33FF7D52A8FFFFFF52F8F8A8FD0DFF52FD08F82727F827FD15FF7D52FD0D
%FF7DF82727F852FD37FF52F8F827FD0EFF27FD08F827F8F8F8A8FD14FF52
%52FD0DFF2752A8FFA82727FD19FFA8A87DFD04A8FFFF7D527D7D7D277DFD
%0CFF27F827A827FD0EFF27FD0DF8FD14FF27A8FD0DFF52FD05FF52F8A8FD
%10FF7D52277D7DA8FD057DA87D7DFFFFA8A8A8FFFFFF27A8FD09FFA8F8F8
%27FF7D7DFD0CFFA8FFFD0EF852FD10FFA8FFA827A8FD0CFFA827FD05FFA8
%F8F87DFD0EFFF8F852A8A8FD12FF7D52FD08FF52F8F8F8FFFF7D52FD0BFF
%A8A87DFD0BF82727F8F87DFD12FF27FD0DFF7D7DFD06FF27F8F8277DFD0B
%FF7DF852FD09FFA8FFFD07A8FFA8A852FD07FFA827F8F827FFFFFF52A8FD
%0CFFA87DFD09F852A8FFFFA827F87DFD10FF7D52FD0DFF527DFD06FF27FD
%04F827A8FD09FFA8F827A8A87D7D527D527D527D527D527D7DA87DA87DA8
%7DA8FD05FFA827F8F8F852FD04FF52A8FD0BFF7DFF27FD07F827A8FD06FF
%7D2727A8FD0EFF7D52FD0DFF52A8FD06FFFD07F852A8FD08FFA87D7D7DA8
%7DA8A8FD13FFA852FD04F87DFD05FF52FD0CFF7DA827FD06F852FD0AFF7D
%2752A8FD0CFF527DFD0CFFA852A8FD05FF7DFD09F8277DA8FD1EFFA827FD
%04F827A8FD05FF7D7DFD0CFF7DA8FD06F87DFD0DFF7D52FD0CFF527DFD0C
%FFA852FD06FF7DFD0BF82752FD04A8FD17FF5227FD05F852FD07FF7D7DFD
%0BFFA8A87DFD04F827A8FD05FFA8FFA8FFA8FD12FFF8FD0DFF527DFD06FF
%7DFD0DF827A8A852A87D527DA8FD0DFFA8A85227FD07F8A8FD08FF52A8FD
%0BFFA8A852F8F8F827A8FD04FFA8F82727522752525227525252FD0BFF52
%27FD0DFF527DFD06FF7DFD0BF8527DFFFFFF27277DFF7D7DFD09FFA87D7D
%2727FD08F852FD0AFF52FD0CFFA8FF27F8F827FD06FF7DF8A8FD09FFA8FD
%0AFFA8F827FD0DFF27A8FD06FF7DFD09F827A8FD04FF5252A8FFFFFFF8FD
%04527D52522727FD0BF852A8FD0AFFA852FD0DFFA8F8F8F8A8FD06FFA8F8
%A8FD14FF27F87DFD0CFFA852FD08FFFD07F87DA8FD04FFA8527DFD04FF7D
%7DA8A852FD0EF82752FD0DFF7D7DFD0DFF7DF8F8A8FD07FFA8F87DFD13FF
%7DF87D7DFD0CFF7D52FD08FF27FD04F852FD06FF7D52FD05FF7D52FF527D
%FFA827FD0BF87DA8FD0EFF7D7DFD0DFF27F8A8FD09FFF852FD13FFF8A852
%A8FD0CFF527DFD08FF52F8F852A8FD05FFA87D7DFD05FF7D52FFFF5252FF
%FFFF52FD07F87DA8FD11FF52FD0EFFF87DFD0AFF52F8A87D7DFD0552FD0A
%FF5227FF52A8FD0CFF27A8FD08FF27F87DFD06FFA87DA8FD05FF7D52A8FF
%FF5252FD04FF52F8F8277D7DFD13FFA852FD0DFF7D27FD0BFFA8FD0752F8
%27FD0AFF277DFF52FD0DFF27FD08FFA827FD0FFFA87DFD04FF2752FD05FF
%7D27FD16FFA87DFD0DFF527DFD12FF5227FD0AFFA8F8FF7D52FD0CFF7D52
%FD07FFA827FD10FFA8A8FFFFFFA827F852FD05FF7D7DFD15FF7D7DFD0DFF
%27A8FD11FF2727FD0BFF527DFF7D52FD0BFFA8527DFD07FF27FD16FF52A8
%FF27FD1CFF7DA8FD0CFFA827FD11FF2727FD0CFF27A8FF527DFD0AFFA8A8
%27FD07FF27A8FD15FF7D52FFFF27A8FD1BFF52FD0DFF5252FD10FF2727FD
%0CFFA827FFFF52A8FD0BFF5252FD06FF52A8FD16FF52FFFFFF27FD1BFFA8
%7DFD0CFFA852A8FD0FFF5227FD04FF7DFD08FF277DFFFF27FD0BFFA82752
%FD05FF5252FD16FF52A8FFFFA852A8FD1AFFA852FD0BFFA85227FD0FFF52
%27A8FFFFFF27F827FD06FFA827A8FF7D52FD0BFFA8F8A8FD04FFA827FD16
%FF7D7DFFFFFFA852FD1BFF7D7DFD0BFFA8277DFD0EFF7DF8A8FFFFFF27F8
%A85227FD05FF7D27FFFF7D52FD0BFF52F8FD05FF2752FD15FFA852FD04FF
%7DA8FD1BFF52A8FD0BFF5227A8FD0DFF7DF87DFFFFFF27F8A8FFFF52FD05
%FF527DFFFF52A8FD0BFF5252FD04FF7D27FD16FFA8A8FD04FF7DFD1AFFA8
%FF52FD0CFF5252FD0DFFA8F852FFFFFF52F8A8FD09FF52A8FFFF52A8FD0B
%FFF87DFD04FFF8A8FD06FFA8FD14FFA852FD15FFA8A87D7D7DA8A852FD0B
%FFA8F8A8FD0DFFA8F8F87DFF52F87DFD0AFF27FFFFFF52FD0BFFA827A8FF
%FFFF2752FD05FFA87DFD15FF52A8FD0CFFA8FFA8A87DA87D7D527D7DA8A8
%FFFFA852FD0BFF5252FD10FF5227F8F87DFD0AFF5252FFFFA852FD0BFF7D
%27FFFFFFA827A8FD05FF52FD15FFA852FD09FFA8527D527D527D7DA87DA8
%A8FD07FF7D7DFD0AFFA8F87DFD11FFA8A8A8FD0BFF277DFFFFA852FD0BFF
%527DFFFFFF527DFD05FF7DA8FD15FF7D7DFD09FF7DFD12FF7DA8FD0AFF7D
%F8FD20FFF8A8FFFF527DFD0BFF52A8FFFFA827FD05FFA87DFD16FF27FD1D
%FF52FD0BFF2752FD1FFFA827FFFFFF527DFD0BFF27FFFFFF527DFD05FF7D
%A8FD15FF7D7DFD1DFF7DFD0AFFA827A8FD1FFF7D27FFFFFF27A8FD0AFF52
%52FFFFA827A8FD05FF7DFD16FF52A8FD1CFF5252FD0AFF5227FD20FF527D
%FFFFFF52FD0BFF527DFFFFA827FD15FFA8FD07FF52FD1BFFA852F87DFD0A
%FF27A8FD20FF52A8FFFFFF27FD0BFF27FFFFFF527DFD14FF7D7DFD06FF52
%7DFD19FFA827277D7D7DFD09FF7D27FD20FFA827FFFFFF7D52FD0AFF7D52
%FFFFFF52A8FD14FF7DFD07FF52A8FD17FF7D52277DFFFF52A8FD09FF527D
%FD20FF277DFFFFFF7D27FD0AFF5252FFFFA827FD14FFA87DFD07FF52FD15
%FFA87DF82752FD04FF527DFD09FF27FD1EFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (\315\274\317\361\303\350\304\241) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe \267\342\314\327\324\366\320\247\271\244\276\337) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe \312\265\312\261\311\317\311\253\324\366\320\247\271\244\276\337) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe \312\351\267\250\273\255\261\312\324\366\320\247\271\244\276\337) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe \270\264\272\317\320\316\327\264) (PathfinderS.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \315\274\260\270\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \315\274\260\270\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \322\325\312\365\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \322\325\312\365\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \311\242\265\343\273\255\261\312\324\366\320\247\271\244\276\337) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \311\242\265\343\273\255\261\312\324\366\320\247\271\244\276\337) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe \273\354\272\317\324\366\320\247\271\244\276\337) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe \267\373\272\305) (ParticleSystem.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.929412 0.87924 0.890196 0.799985 ([\714\727\660\746\711\653]) 0 Xs
([\714\727\660\746\711\653])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(\315\274\262\343 1) Ln
0 A
u
u
*u
0 O
0 g
0 J 0 j 1 w 10 M []0 d0 XR
563 252 m
552.5977 255.6144 543.3634 261.6798 533.3919 266.2234 C
528.699 268.3618 524.486 268.9298 520.1382 266.6259 C
505.7655 259.01 492.9162 249.4235 482.5151 236.7632 C
480.7218 234.5803 478.8641 232.3927 476.7379 230.5518 c
470.2738 224.9548 467.8138 217.6572 465.8187 209.5371 C
463.6563 200.736 459.4881 192.4354 456.3022 183.8765 C
450.6139 168.5947 443.5732 153.8988 437 139 C
436.3333 139 435.6667 139 435 139 C
438.0035 147.251 441.0633 155.4821 443.997 163.7579 C
448.1541 175.484 452.1732 187.2565 455.2188 199.3362 C
455.4336 200.1881 456.0056 200.95 457.2277 201.4465 C
454.1694 191.2863 451.1111 181.1261 448.0527 170.9659 C
448.3392 170.8715 448.6257 170.7771 448.9122 170.6827 C
452.5231 180.4635 456.3267 190.1782 459.708 200.0377 C
469.1028 227.4323 476.0324 255.4503 480.8911 284.0099 C
489.2818 333.331 492.2939 383.0562 492.8473 433.0063 C
493.1076 456.4991 493.2346 479.9886 490.8213 503.3698 c
489.1155 519.8956 486.7396 536.3508 484.0011 552.7609 C
479.9664 576.9391 472.3244 599.7255 460.1036 621.0058 C
456.4091 627.4392 451.5943 633.226 448.9457 640.2614 C
457.4288 630.3047 463.2865 618.7447 469.0716 607.154 C
481.2689 582.7159 487.2094 556.6111 489.9301 529.5897 C
492.4163 504.8987 495.2769 480.2457 495.082 455.3735 C
495.0154 446.8759 495.0354 438.3764 494.8406 429.8819 C
494.7729 426.9335 495.1031 425.1788 498.8037 425.5184 c
503.6469 425.963 506.3554 422.2606 508.783 418.9661 C
513.5389 412.5121 517.2398 405.5756 518.5328 397.3911 C
520.9118 382.3324 522.5978 367.3622 517.893 352.4389 c
517.593 351.4872 517.5378 350.3131 516.9335 349.6242 c
508.4639 339.9691 512.5286 329.4045 515.6299 319.6011 C
520.1301 305.3753 525.6042 291.3914 533.3304 278.4917 C
535.8887 274.2202 538.5596 269.8852 541.9236 266.2726 c
544.2409 263.7841 547.7537 262.3227 550.8869 260.7014 C
554.9901 258.5781 558.5249 255.4362 563 254 C
563 253.3333 563 252.6667 563 252 C
f
1 D
495.0253 377.9452 m
493.2994 377.6486 493.2359 376.3324 493.1418 374.9729 C
492.4141 364.4675 491.651 353.9646 490.9404 343.458 C
490.8549 342.1949 490.558 340.7616 492.0846 339.9843 C
488.5823 331.7636 489.2597 322.9551 487.8126 314.2783 C
490.221 314.2592 491.1397 315.6664 492.0542 316.6655 C
510.2781 336.575 522.4702 358.5696 517.5113 387.0275 c
515.4286 398.9795 512.9173 410.4666 504.5041 419.8245 C
502.2966 422.2798 499.8356 423.406 496.613 423.153 c
495.5638 423.0706 494.7719 422.9194 494.288 421.7585 c
492.8827 418.3871 494.5067 410.4154 497.1006 407.4887 c
503.2618 400.5372 505.5079 392.2059 505.6267 383.1744 C
504.123 388.7525 503.0577 394.4536 500.5749 399.7807 C
499.4533 402.1873 497.2728 402.9195 495.2975 402.6963 c
493.0403 402.4412 494.0972 399.9693 493.9967 398.4987 c
493.7242 394.513 493.8153 390.5034 493.5934 386.5127 C
493.427 383.5217 492.8218 380.5161 495.0253 377.9452 C
f
501.1996 321.6957 m
503.1557 308.4687 502.5188 295.1369 502.4263 281.8214 C
503.2919 295.1454 503.3319 308.4451 501.1996 321.6957 C
f
509.5838 321.3994 m
509.1378 321.3996 508.6917 321.3997 508.2457 321.3999 C
508.2457 307.3131 508.2457 293.2262 508.2457 279.1394 C
509.2965 293.2258 507.9619 307.3131 509.5838 321.3994 C
f
518.3354 275.318 m
519.7629 288.5396 519.372 296.0103 517.2127 299.2542 C
516.3571 291.1168 517.5951 283.2604 518.3354 275.318 C
f
513.6361 280.3209 m
513.8014 283.8169 513.9969 289.3279 512.383 295.6675 C
510.6146 289.0869 514.2539 283.8492 513.6361 280.3209 C
f
*U
0 D
129 139 m
131.1422 146.6781 133.1285 154.4039 135.459 162.0244 C
140.4277 178.2714 141.9761 195.1892 146.0566 211.6489 C
144.9184 204.6996 143.7801 197.7502 142.6419 190.8008 C
142.9642 190.7321 143.2866 190.6635 143.609 190.5948 C
145.0175 195.2739 146.511 199.9293 147.8205 204.6359 C
155.5827 232.5347 161.0061 260.9781 167.5009 289.1724 c
168.0258 291.451 167.934 293.1768 166.3681 295.1241 C
156.9086 306.8876 152.7351 320.4556 153.1303 335.4748 c
153.1678 336.9002 153.0636 338.0519 151.7244 338.9003 C
139.0191 346.95 127.7653 356.6891 117.6482 369.188 C
117.0265 359.7234 117.098 351.3373 116.4434 342.981 C
114.5185 318.4087 111.5458 293.9765 107.1783 269.7297 C
101.787 239.7986 96.6633 209.8191 90.6586 179.9968 C
87.9357 166.4738 85.9379 152.7963 85 139 C
84 139 83 139 82 139 C
85.755 171.6619 93.0103 203.7334 98.9576 236.0659 C
88.5435 222.2623 83.3747 206.276 77.7338 190.5222 c
71.7013 173.6751 70.8344 155.3401 63 139 C
62 139 61 139 60 139 C
59.5772 141.0711 60.8635 142.6447 62.0097 143.8899 c
65.7054 147.9047 65.0215 153.113 66.1588 157.8005 c
67.1121 161.7294 66.8981 166.0923 68.4994 169.6842 c
72.7799 179.2861 73.7247 189.8503 77.7493 199.4803 C
82.9261 211.8672 85.6481 225.5364 94.376 236.0824 c
99.9386 242.8037 100.996 249.8624 102.0174 258.0846 c
103.0028 266.0166 104.1228 274.2041 106.2718 282.0784 c
106.7091 283.6808 108.4755 285.8116 105.8071 287.3475 c
105.5683 287.485 105.4155 288.3679 105.5448 288.462 c
109.3243 291.2121 107.1334 295.0548 107.572 298.4574 c
108.4004 304.8831 110.7576 310.8167 110.1942 317.7952 c
109.643 324.6235 112.8513 331.6844 113.3 338.8672 c
113.9179 348.7581 114.824 358.6152 114.7782 368.5565 c
114.7671 370.9879 114.165 372.6182 112.6452 373.5651 c
109.0986 375.7746 106.6469 379.0752 103.1648 382.3839 C
100.6221 375.1847 102.7499 367.9515 101.0414 360.2669 C
95.69 368.836 92.2121 377.2607 88.674 385.6643 C
84.4841 395.6161 81.6702 406.0169 78.4608 416.291 c
78.109 417.4172 78.7543 418.1989 78.9722 419.1344 C
83.0512 407.5606 87.0124 395.9433 91.2631 384.4329 C
93.148 379.3286 95.6182 374.4406 98.4827 369.5575 C
97.6574 381.273 103.3844 393.1024 96.4565 404.6791 c
93.7378 409.2221 92.7294 414.7885 91.3484 420.0887 C
104.0841 385.0486 125.6845 357.2372 157.7591 337.6029 C
138.8864 377.3153 129.6264 419.182 128.1135 462.8368 C
129.7878 449.245 130.2369 435.4577 133.7291 420.5004 C
136.3932 431.1979 137.9469 440.8319 142.534 449.5068 C
142.6261 449.3042 142.7936 449.1055 142.7476 449.013 C
134.1159 431.6458 139.4967 414.3556 143.0464 397.0675 c
145.6865 384.2095 148.9061 371.4861 151.3428 358.5669 c
152.8648 350.4973 157.4223 343.1758 161.1445 335.7505 c
161.5005 335.0404 161.789 334.2966 162.1199 333.543 C
161.6457 333.3898 161.3421 333.1739 161.1492 333.2477 c
159.1888 333.9973 157.7189 337.2043 155.7342 335.9455 C
153.9921 334.8405 155.7179 332.0103 155.7791 329.9418 C
156.1989 315.752 162.5663 304.1604 171.6871 293.7584 c
191.4854 271.179 216.9767 257.6273 244.6756 247.5299 C
246.8159 246.7496 248.9566 247.1633 251.0997 247.0552 C
241.7943 242.7333 232.5181 238.347 223.1771 234.1032 c
205.2345 225.9517 189.0288 215.79 177.9858 198.6639 c
172.5806 190.2813 167.4564 181.76 162.3125 173.2271 c
155.8725 162.5443 152.4427 150.7935 149 139 C
148 139 147 139 146 139 C
146.5485 140.5699 147.215 142.1094 147.6279 143.7141 C
154.9197 172.0542 170.9854 195.3531 190.1693 216.695 C
192.8863 219.7176 193.248 221.9173 192.5579 225.3344 c
190.4099 235.9705 187.9397 247.1169 190.8978 257.4458 c
193.9682 268.1663 190.3743 273.8824 181.9967 279.0057 C
177.3509 281.847 167.5162 278.5165 166.3836 273.1689 c
164.2154 262.9311 162.0793 252.6866 159.9542 242.4398 C
152.6885 207.4049 141.0721 173.5464 132 139 C
131 139 130 139 129 139 C
f
358 139 m
365.9232 142.7826 374.399 145.3091 382.0938 149.6139 c
385.7238 151.6446 389.3178 153.7559 393.0512 155.5788 C
394.8707 156.4673 395.2724 157.8525 395.5344 159.5403 C
401.093 195.3515 410.6623 230.3506 417.0864 265.9861 C
418.0867 271.5348 418.8844 277.1201 419.7884 282.7673 C
390.1293 250.2927 354.2611 228.8278 311.5724 218.8572 C
312.8812 216.9018 315.9489 214.8973 317.1491 210.8269 C
308.7797 217.9923 300.851 224.634 293.0987 231.4754 C
288.8363 235.2369 283.2651 233.8706 278.5233 235.6693 C
277.6923 235.9846 277.2055 234.9514 276.7926 234.1925 c
271.6465 224.7333 262.4754 219.0536 255.5129 211.2912 C
259.5074 218.0636 265.2456 223.2579 270.8774 228.5286 c
272.3469 229.9039 274.0044 231.0873 274.6167 233.0762 c
275.6814 236.5349 276.0369 240.1171 273.3139 242.9205 C
270.4262 245.8935 267.3209 244.0323 264.7162 242.2755 c
252.9999 234.3732 241.3854 226.32 229.1842 218.7546 C
230.6166 220.0398 231.948 221.4648 233.499 222.5858 C
240.2439 227.4611 246.923 232.4476 253.8964 236.9774 c
257.1063 239.0624 256.6228 241.7152 256.1002 244.3873 c
255.5678 247.1095 253.1513 247.1216 250.8964 246.9373 C
256.0578 249.0029 257.6165 248.0763 259.8252 241.556 C
261.9456 241.5932 263.3123 243.2757 265.0736 244.0812 c
271.2905 246.9247 274.6639 245.9342 277.3679 239.7562 c
278.5555 237.0427 280.7291 237.4257 282.7411 237.1679 C
297.3595 235.2949 311.5884 238.103 325.7438 241.108 C
350.8537 246.4385 374.4672 255.4545 395.5109 270.4875 C
403.1001 275.909 410.326 281.7833 417.0081 288.3022 C
419.7948 291.0208 421.8423 294.0858 422.3914 298.139 c
424.7104 315.2559 426.7444 332.3989 427.6877 349.8748 C
417.7428 336.5265 407.4044 323.6417 394.2435 313.2776 C
403.244 329.4478 409.6661 346.5857 415.2336 364.1106 C
418.4923 374.368 420.0498 385.0941 424.05 395.1291 C
423.5357 383.5219 419.5615 372.6799 416.362 361.7101 c
412.3242 347.8663 407.2661 334.3658 400.2852 321.5943 C
406.1239 326.4332 411.0732 332.0524 415.7527 337.9124 C
420.5299 343.8947 425.0319 350.0751 429.1009 356.5756 c
433.1215 362.9988 436.9727 369.5142 440.6863 376.1411 C
438.215 368.9484 434.6411 362.2861 430.8397 355.7468 C
430.0835 354.446 429.2663 353.377 429.2703 351.7134 C
429.3635 312.8656 422.0225 275.0946 413.1364 237.4836 C
408.1339 216.3107 404.1479 194.895 399.8491 173.5594 c
397.5492 162.1448 395.6833 150.6505 395 139 C
394.3333 139 393.6667 139 393 139 C
392.3267 143.5906 394.1185 148.0532 393.9271 153.3535 C
385.4062 146.9096 375.863 143.6212 367 139 C
364 139 361 139 358 139 C
f
*u
211 651 m
207.8122 630.9024 206.9973 610.6297 206.536 590.3319 C
205.9491 564.5073 207.2993 538.8174 211.4984 513.2883 C
212.0906 509.6877 213.3341 508.4568 216.8826 508.7599 C
219.9715 509.0237 223.1853 509.0482 226.3566 506.473 C
222.5539 505.948 219.885 508.408 216.6103 508.1476 c
213.4625 507.8972 212.4554 506.9359 213.1257 503.9046 C
219.0445 477.1376 225.4717 450.5171 235.5626 424.9362 C
232.6601 427.081 232.1665 430.5617 231.062 433.585 c
222.7166 456.4281 216.7234 479.9276 212.1498 503.7858 c
211.5609 506.8581 210.4436 507.6721 207.4534 508.1761 C
195.1703 510.2465 182.5786 510.008 170.4648 513.1339 c
167.5281 513.8917 166.5593 513.0225 165.5564 510.276 c
159.5692 493.8793 153.3327 477.5738 147.1729 461.2403 c
146.7109 460.0152 146.1944 458.8106 144.9319 457.8426 C
146.9324 464.1971 148.7622 470.6116 150.9705 476.8929 c
154.939 488.1804 159.0705 499.412 163.2791 510.6125 c
164.3759 513.5316 164.5627 514.6416 160.6497 515.2616 C
153.3886 516.4119 146.0629 517.8656 139.4352 521.4603 C
146.9298 520.2058 154.1986 518.0226 161.6853 516.7154 c
165.464 516.0556 166.0499 517.4117 167.1007 520.095 c
176.0251 542.8837 185.6414 565.4127 198.405 586.3187 c
203.1851 594.1482 205.0831 601.9309 204.9547 610.7532 C
204.7749 623.1041 206.9613 635.2872 207.9787 647.5553 C
208.0733 648.6962 207.997 649.8514 208 651 C
209 651 210 651 211 651 C
f
1 D
201.4754 580.3082 m
199.9586 578.5069 198.9903 577.459 198.1349 576.3258 c
186.1832 560.4922 178.3414 542.5201 171.0805 524.2485 c
167.3213 514.7887 167.8108 514.0627 178.2193 513.1996 c
188.151 512.376 198.1453 511.994 207.8164 509.2295 c
210.2989 508.5198 211.1369 509.2231 210.6719 511.9014 C
209.5903 518.131 208.3773 524.3695 207.8498 530.6574 C
206.4763 547.029 202.5916 563.0388 201.4754 580.3082 C
f
*U
0 D
51 604 m
60.6616 611.4752 70.3978 618.7144 78.7302 627.9116 c
83.636 633.3264 90.0479 637.5453 94.895 643.2645 c
96.9067 645.6382 99.3244 647.7443 100 651 C
101 651 102 651 103 651 C
96.3645 638.9226 89.3545 627.0544 83.6748 614.4585 c
72.5288 589.7398 66.206 563.7706 61.9053 537.0709 C
57.5152 509.8156 58.1989 482.3725 57.6117 454.7498 C
59.0943 458.9866 60.5501 463.233 62.0653 467.458 c
65.0376 475.7461 68.7585 483.8484 70.8272 492.354 c
72.7722 500.351 72.9578 508.7722 73.9723 517.0001 c
75.0992 526.1393 76.6954 535.1846 79.6895 543.9408 C
78.1305 534.8282 76.1037 525.8026 75.0348 516.6176 c
71.591 487.0236 71.8083 457.5237 77.374 428.1658 C
77.9585 425.0829 78.5002 421.9918 79.0618 418.9045 C
75.8084 421.5861 76.7986 425.61 76.1037 429.0017 c
72.6775 445.7255 71.879 462.8118 68.8388 479.9216 C
64.6445 467.618 60.4503 455.3144 56.256 443.0108 C
55.9434 443.0165 55.6307 443.0221 55.3181 443.0278 C
55.0441 447.1496 54.5899 451.2687 54.5296 455.3935 c
54.3393 468.426 54.3346 481.6047 55.458 494.4418 c
56.765 509.3748 57.3747 524.487 60.0756 539.3205 c
62.1867 550.9153 64.1285 562.5446 66.1995 574.1414 c
67.0775 579.0579 66.8143 584.2454 69.2565 588.7647 c
76.5891 602.3334 81.7445 616.8785 88.0741 631.1258 C
79.3371 624.0665 70.6134 616.9905 61.8566 609.9559 c
58.3574 607.1449 55.0427 604.0729 51 602 C
51 602.6667 51 603.3333 51 604 C
f
563 244 m
553.1841 242.9196 543.3996 244.5827 533.5934 244.3346 C
529.7669 244.2378 525.9405 244.1375 522.1148 244.0144 c
519.6458 243.9349 518.5634 242.9193 519.1068 240.2229 C
520.059 235.499 520.8352 230.7342 521.508 225.9615 c
521.9116 223.098 523.8595 223.7352 525.625 223.8257 C
533.4419 224.2262 541.2556 224.7011 549.0758 225.014 C
550.9391 225.0886 553.2573 225.7782 554.2543 223.2111 c
555.1789 220.8305 553.0182 219.9084 551.8046 218.7982 C
541.2323 209.1265 531.0843 199.0737 522.4045 187.6162 c
518.8918 182.9794 518.8868 183.1707 523.9234 180.6997 c
528.422 178.4926 531.955 178.2525 535.5222 182.7923 C
540.0143 188.5093 545.3644 193.5451 550.1956 199.0064 C
552.1201 201.182 553.6581 201.1979 555.4404 199.0385 c
557.6492 196.3622 559.6866 193.4933 563 192 C
563 190.6667 563 189.3333 563 188 C
560.1007 188.843 558.5867 191.4964 556.5055 193.3134 c
553.7005 195.7624 552.2489 195.0169 550.1881 192.5748 C
545.8997 187.493 541.2545 182.7127 536.9494 177.6442 C
534.2448 174.46 531.4086 173.4972 527.2783 174.867 C
522.8339 176.3411 518.8561 178.6756 514.6403 180.557 C
511.6025 181.9128 513.9186 183.1826 514.7885 184.2349 C
523.8026 195.1411 533.375 205.5396 543.3938 215.5317 C
545.1243 217.2577 546.655 219.1842 548.2966 221.0391 C
539.2815 221.0391 530.581 221.2791 521.9051 220.9224 C
518.3717 220.7771 517.219 221.4427 516.5082 225.137 C
515.3744 231.0288 514.5822 236.9191 514.008 242.8711 C
513.7621 245.4195 514.4676 246.0012 517.2026 246.2215 c
532.489 247.4528 547.7362 245.4281 563 246 C
563 245.3333 563 244.6667 563 244 C
f
532 651 m
534.839 645.2407 538.1518 639.7522 540.8957 633.9067 C
545.0772 624.999 550.6963 616.7928 558.7093 610.6581 C
560.9935 608.9093 559.2473 604.7047 563 604 C
563 602.6667 563 601.3333 563 600 C
560.2691 597.8338 559.2885 600.4576 558.162 601.9512 c
555.9305 604.9097 553.9338 608.0453 551.8401 611.1078 C
553.7275 602.357 556.8158 594.1031 558.5858 585.5755 C
559.1897 582.666 560.2224 579.6378 560.342 576.3704 c
560.4893 572.3416 559.5188 567.5166 563 564 C
563 547.6667 563 531.3333 563 515 C
560.803 522.7562 561.1313 530.757 561.0041 538.6635 C
560.366 578.3136 550.3449 615.2423 529.5679 649.1406 c
529.2401 649.6754 529.1833 650.3765 529 651 C
530 651 531 651 532 651 C
f
267 139 m
269.9575 150.9814 275.0759 162.1638 279.6159 173.5726 C
283.3364 182.9219 288.6128 191.9045 287.8751 202.5332 c
287.703 205.0123 287.392 207.5086 286.8321 209.9245 c
286.4662 211.5033 285.7344 213.191 283.7607 213.4733 c
281.8827 213.7419 281.2455 212.1389 280.4178 210.9395 C
275.0294 203.1307 269.6748 195.2985 264.272 187.4997 C
263.543 186.4473 262.606 185.5391 261.1639 184.9635 C
264.7422 190.4442 268.1501 196.0461 271.9428 201.3741 C
276.4373 207.6876 280.0158 214.3506 281.5791 221.9977 c
282.2388 225.2241 282.3246 228.3025 278.9408 230.8646 C
283.0742 231.2776 284.6804 229.3188 284.79 226.078 c
284.8679 223.776 284.6106 221.3991 284.0714 219.1596 c
283.6168 217.2709 283.2955 216.3849 285.8214 215.7613 C
288.9687 214.9842 289.349 211.6966 290.0101 208.9721 c
292.1507 200.1515 288.5644 192.2664 285.8456 184.2691 C
281.0316 170.109 273.7829 156.8753 269.8502 142.3763 C
269.5465 141.2563 269.2825 140.1257 269 139 C
268.3333 139 267.6667 139 267 139 C
f
563 441 m
561.498 454.6667 560.8934 468.3333 563 482 C
563 468.3333 563 454.6667 563 441 C
f
234 139 m
235.3312 144.4984 238.5773 148.9958 242.0299 153.4117 C
239.6866 148.6078 237.3433 143.8039 235 139 C
234.6667 139 234.3333 139 234 139 C
f
*u
418.7962 391.9816 m
406.7341 394.6964 395.55 399.4314 382.9805 400.8825 C
388.013 390.487 389.1928 379.6258 389.0758 368.4649 C
388.9979 361.0261 386.7105 354.36 382.8245 348.28 C
375.7423 337.1991 358.1133 336.8286 350.2511 347.3972 C
347.235 351.4515 345.0161 355.8225 344.157 360.9018 c
342.1063 373.0265 340.4149 385.1688 340.5863 397.8147 C
343.1054 397.2607 345.1934 396.4147 347.2741 396.4319 c
350.6467 396.4597 354.0874 397.3101 354.9147 401.2241 C
355.8067 405.4441 353.09 407.2652 349.3527 407.8452 C
340.4737 409.2234 331.6212 410.9776 322.6866 411.7103 c
317.7773 412.1129 313.1161 414.9003 308.0268 413.2727 C
307.5417 417.0432 305.3859 414.7582 303.5694 414.6817 C
310.4146 419.5831 315.9927 425.83 326.2338 424.1237 C
353.9539 419.5053 381.4577 414.0739 408.4679 406.2859 C
413.9991 404.6911 418.276 398.699 418.7962 391.9816 C
f
1 D
376.6871 358.7892 m
379.1365 369.4841 378.9196 379.9406 374.5293 390.2663 C
372.5523 394.9161 369.52 397.9818 364.5541 397.8118 c
359.8692 397.6514 356.4793 394.4513 354.9434 390.2109 C
351.1197 379.6544 351.9389 369.2561 357.152 359.2405 C
354.9491 368.0799 355.0707 376.9194 357.4827 385.6353 c
358.6915 390.0035 360.6267 394.7043 365.9352 394.8768 C
370.9479 395.0396 372.4613 390.3531 373.9202 386.5144 c
377.3304 377.541 377.6294 368.2125 376.6871 358.7892 C
f
368.9537 375.672 m
368.2301 374.0901 368.0499 373.5027 367.7211 373.0156 c
366.9132 371.8187 366.3249 369.9578 364.5656 370.3104 c
362.4266 370.7392 362.7218 372.937 362.7646 374.4372 C
362.8636 377.9106 363.2104 381.4465 365.8925 384.0878 c
367.2066 385.3818 367.6742 386.6628 365.9867 387.7345 c
364.1924 388.874 363.1287 387.4839 362.643 386.0048 C
360.2869 378.8301 360.204 371.7028 363.532 364.7579 C
364.1147 363.5422 365.0274 362.2685 366.5117 362.5541 c
367.9244 362.826 368.494 364.3362 368.7595 365.6024 c
369.3693 368.5116 369.7403 371.4685 368.9537 375.672 C
f
375.8171 350.3408 m
383.4767 356.3618 386.0517 378.1174 379.9425 386.1633 C
381.1271 379.6076 381.3127 373.681 381.1187 367.7101 c
380.9201 361.5974 378.7647 356.1416 375.8171 350.3408 C
f
373.6788 366.3624 m
371.0674 360.6862 369.4683 354.1679 360.8056 354.4122 C
363.809 351.9539 366.8998 350.9684 369.5228 352.7491 c
374.2274 355.943 373.6006 361.3272 373.6788 366.3624 C
f
354.0438 396.4682 m
348.5419 389.5773 348.537 381.4904 349.7342 373.1885 C
350.2946 377.0978 350.5089 381.054 350.9636 384.9824 c
351.4214 388.9377 352.931 392.6082 354.0438 396.4682 C
f
346.6646 381.5526 m
346.8739 386.4394 348.4161 390.5343 350.0482 394.7337 C
344.9489 394.193 343.6575 389.139 346.6646 381.5526 C
f
*U
*u
0 D
141.6857 437.6445 m
143.8953 442.7168 148.5519 445.2882 152.034 448.9991 C
150.5161 450.4589 148.6642 449.7414 147.2775 450.6725 C
158.1307 450.3279 168.9362 450.0477 179.6544 447.9992 c
192.7202 445.5019 205.8455 443.3375 218.4986 439.0676 c
221.8239 437.9454 227.3544 430.1817 226.8455 426.774 c
226.4067 423.8351 224.2305 423.5284 221.9716 424.7824 c
219.1818 426.3313 216.3198 427.5154 212.4798 428.0534 C
218.3447 418.9486 221.5463 409.366 222.5901 399.1114 c
223.3902 391.2496 222.876 383.4489 220.1688 375.9662 c
217.5246 368.6577 210.3083 364.0411 201.7107 363.8085 c
194.4771 363.6129 188.7706 367.4012 185.8337 375.203 C
180.667 388.9285 177.3048 403.1252 176.2283 417.7851 c
175.7744 423.9672 175.9685 424.0338 181.778 422.5362 c
183.6136 422.0631 185.297 421.8952 187.1313 422.5836 c
189.3871 423.4303 191.7035 424.1532 191.6332 427.125 c
191.571 429.7611 190.5308 431.8029 188.0084 433.1857 c
185.4235 434.6028 182.6699 434.9743 179.8806 435.2851 c
170.2141 436.3623 160.6868 439.4499 150.7501 436.9747 C
149.2883 436.6106 146.178 434.9142 145.5588 438.9818 c
145.4501 439.6956 143.5103 437.2952 141.6857 437.6445 C
f
1 D
211.1571 390.8513 m
205.755 386.1054 203.8526 386.5388 201.1572 391.9577 C
199.0958 396.102 198.6689 400.4491 198.8985 404.9929 c
199.0274 407.5448 199.3258 409.9297 201.0448 411.9382 c
202.9402 414.153 205.2489 412.8643 207.9207 412.1068 C
207.0902 413.4528 206.7524 414.2372 206.2094 414.8354 c
204.6748 416.5259 203.3108 419.0924 200.7165 418.5325 c
197.7338 417.8889 197.6389 414.7567 197.4501 412.3952 C
196.7561 403.7154 197.0715 395.1334 201.7299 387.3456 C
203.288 384.7408 205.2424 381.5297 208.4151 382.2768 c
212.3124 383.1946 210.4465 387.1862 211.1571 390.8513 C
f
191.3006 420.1555 m
187.1853 417.169 186.1913 413.7552 185.9633 410.1766 c
185.3898 401.1739 187.7749 392.7168 191.7755 384.796 c
194.1674 380.06 197.29 375.6012 202.5028 373.4299 C
205.6255 372.1292 208.8385 371.5922 211.4762 374.6637 C
207.1108 372.6986 203.6784 374.7605 200.3915 377.1161 C
197.3534 379.2932 195.3343 382.3876 193.6207 385.6251 C
187.922 396.3921 186.7966 407.6106 191.3006 420.1555 C
f
198.226 420.8647 m
190.533 419.5481 189.2168 401.1583 195.6789 392.0863 C
193.7015 401.9971 192.2905 411.5055 198.226 420.8647 C
f
*U
0 D
239.0251 414.9262 m
241.6213 414.3477 240.2549 416.1845 240.1717 416.9774 c
238.4197 433.6849 236.6931 450.3926 236.5205 467.2148 c
236.4197 477.0339 236.3144 486.834 237.4897 496.6335 c
238.1313 501.9821 235.233 506.9649 234.7399 512.2681 c
234.607 513.698 233.751 515.0659 234.4185 516.5711 C
245.0756 474.7163 259.582 434.7146 289.5297 401.5599 C
290.4726 421.9063 291.4155 442.2527 292.3584 462.599 C
292.5533 462.5975 292.7481 462.5961 292.9429 462.5946 C
292.9429 459.1933 292.9429 455.7919 292.9429 452.3906 C
297.2695 459.3178 300.1137 466.6806 302.7612 474.1241 c
303.4854 476.1603 303.9554 478.2874 304.6907 480.319 c
306.8771 486.3591 309.9008 492.4434 302.8113 497.4845 c
302.3641 497.8025 302.2645 498.6093 302.0867 499.0035 C
302.3317 499.7498 302.5204 499.7812 302.84 499.4606 c
304.5349 497.7611 305.138 494.1688 308.0133 494.6576 c
311.0669 495.1768 310.2478 498.7544 310.8092 500.9756 C
317.6559 528.0654 323.068 555.4256 325.677 583.2835 C
325.9658 586.366 326.0065 589.4717 326.9843 592.6896 C
329.306 585.5724 331.687 578.4739 333.939 571.3347 C
343.2846 541.7075 356.6269 513.8768 371.7841 486.8543 C
373.9305 483.0278 375.8722 479.0564 380.4471 477.499 c
380.5384 477.5759 l
377.0859 478.5133 378.0872 476.6049 379.0639 475.0916 c
382.3019 470.0748 385.5662 465.0709 388.9713 460.1667 C
399.9514 444.3532 411.1788 428.7184 423.1532 413.6344 C
423.8467 412.7607 424.6677 411.9881 426.0769 410.4715 C
426.9542 416.637 427.7119 421.9629 428.4698 427.2888 C
427.9629 416.3409 427.7878 405.3525 423.9487 394.882 C
423.9201 395.3786 423.7215 395.9426 423.8878 396.3619 C
427.3955 405.2094 422.4775 411.1722 417.4117 417.6451 C
402.8703 436.2259 389.2735 455.5117 376.7628 475.5302 C
375.4135 477.6892 373.7755 478.8573 371.5735 479.6748 C
374.7166 481.7179 371.9824 483.475 371.1004 485.0058 C
359.8052 504.6109 348.6563 524.2637 340.8026 545.6085 C
337.2827 555.175 333.113 564.5026 328.7766 575.0628 C
327.1974 565.7018 326.2226 557.4952 324.3773 549.4892 C
320.4996 532.6651 316.6282 515.8299 311.7962 499.2391 C
311.3849 497.8271 309.6977 495.6226 311.9842 494.953 c
315.9241 493.7992 318.6699 490.0788 322.6454 489.7186 C
332.4565 488.8295 341.773 485.5987 351.4792 484.193 C
358.3049 483.2046 365.3356 482.6195 371.7477 479.5973 C
359.1103 481.4739 346.3175 482.4568 334.0685 486.5331 c
331.914 487.2501 329.4287 487.4104 327.1481 487.2168 c
322.8518 486.852 319.4819 488.6109 316.0597 490.831 c
311.8349 493.5717 310.1589 493.0589 308.7993 488.3494 C
304.5074 473.4838 299.156 459.0087 293.5548 444.599 C
291.8146 440.1218 292.1299 435.1096 291.9843 430.2841 C
291.6642 419.6763 291.2592 409.0711 290.8346 396.9115 C
278.4645 409.2875 269.6811 422.4375 261.9291 436.3908 C
254.209 450.2867 246.5607 464.2067 240.969 479.3063 C
237.2248 455.8002 242.5986 432.5389 242.2734 408.8283 C
240.1311 410.3957 239.6708 412.7161 239.0251 414.9262 C
f
325.8606 276.8666 m
333.8487 275.9057 341.6822 277.6015 349.5888 277.8816 C
352.7733 277.9944 356.2029 273.2704 356.0742 269.4983 C
355.9339 265.3903 354.1732 262.2146 349.6415 262.0992 C
340.0049 261.8538 330.311 262.4932 320.7324 261.6835 C
309.5279 260.7365 298.2717 261.3953 287.0567 259.429 C
279.802 258.1572 272.1939 258.2173 264.7479 257.5964 C
261.3331 257.3116 259.1058 259.4118 258.0426 262.4734 c
257.0023 265.4689 258.031 267.8844 260.5934 269.8763 c
265.7447 273.8807 271.6249 274.1059 277.6389 273.2974 C
280.8289 272.8685 283.8074 272.877 286.9743 273.714 c
297.4465 276.4818 308.1418 274.1857 318.8763 275.1421 C
318.2512 272.7698 316.5345 272.7269 315.2299 273.0695 c
308.1693 274.9233 300.8581 273.6165 293.9805 273.224 c
286.4779 272.7958 278.7052 272.1145 271.1543 270.7837 c
268.9566 270.3963 267.0522 269.159 266.1747 267.0009 c
265.3975 265.0894 263.8613 263.129 265.5324 260.9435 c
266.967 259.0674 268.9653 259.2861 271.0062 259.5178 C
295.2621 262.27 319.576 263.8697 344.0066 263.1597 C
345.3193 263.1216 346.6412 263.4226 347.9597 263.556 C
350.9688 263.8607 354.6291 263.9279 354.278 268.0975 c
353.9638 271.8296 351.8991 275.0213 347.8208 276.0732 C
345.3514 276.7101 342.7298 276.6038 340.3999 275.8517 C
335.3936 274.2356 330.6405 274.7476 325.8606 276.8666 C
f
127.5039 479.6351 m
125.0336 533.0459 132.9346 584.1394 161.1322 630.619 C
147.5486 608.0167 140.0802 583.1145 134.852 557.3681 c
129.6406 531.7042 127.5826 505.7603 127.5039 479.6351 C
f
388.906 295.9521 m
388.2593 287.1926 389.5858 285.849 397.4805 287.6467 C
395.0255 284.998 391.7294 283.9971 389.6908 285.6668 c
386.0102 288.6812 387.3092 292.3443 388.906 295.9521 C
f
200.5033 454.8488 m
195.6198 455.6778 190.7363 456.5067 185.8528 457.3357 C
191.0383 458.1815 195.8138 456.1517 200.5033 454.8488 C
f
418.4463 543.1674 m
421.4936 541.3487 421.3566 537.9739 422.1215 535.1668 C
425.9926 520.959 427.6546 506.3613 429.4336 491.7904 c
429.4322 491.8002 l
426.5288 497.1898 427.1928 503.2618 426.2151 509.0114 C
424.2522 520.5553 422.177 532.0577 418.4464 543.193 c
418.4463 543.1674 L
f
472.7167 274.876 m
471.6616 261.6785 468.7857 248.7836 464.9553 236.0645 C
467.5424 249.0017 470.1295 261.9388 472.7167 274.876 C
f
380.4471 477.499 m
389.0906 477.9135 397.4276 475.5364 405.9301 474.6568 c
409.1599 474.3227 412.3329 473.439 415.3682 471.7518 C
403.7721 473.7047 392.1759 475.6575 380.5591 477.5931 C
380.5384 477.5759 380.4471 477.499 Y
f
429.4336 491.7904 m
430.5956 478.6564 428.6791 465.5894 428.6609 451.5775 C
427.1114 465.6256 429.5678 478.683 429.4327 491.7985 C
429.4322 491.8002 429.4336 491.7904 Y
f
418.4464 543.193 m
418.2886 548.7447 414.9159 553.4349 414.4881 558.9142 C
416.7038 553.9138 419.537 549.0791 418.4489 543.1802 C
418.4463 543.1674 418.4464 543.193 Y
f
396.4958 182.8575 m
384.8748 178.6534 372.7287 176.7565 360.554 175.244 C
349.3481 173.8518 338.1759 171.8482 326.8174 172.0089 C
323.8446 172.0509 321.7192 169.7542 318.8078 169.6065 C
321.3203 171.7119 323.8622 173.6303 327.4698 173.6387 C
342.8351 173.6744 357.9505 176.2001 373.075 178.4863 C
380.9229 179.6725 388.6915 181.3835 396.4958 182.8575 C
f
194.8388 180.5503 m
189.9216 172.4897 184.2368 164.8946 179.892 155.07 C
180.063 161.1653 188.5948 175.2324 194.8388 180.5503 C
f
91.8065 267.8968 m
91.3854 268.4246 90.1833 268.3022 90.5141 269.4391 c
90.5443 269.5428 90.797 269.6722 90.9143 269.6461 c
92.0732 269.3878 91.4429 268.407 91.6545 267.761 c
91.8065 267.8968 L
f
91.6545 267.761 m
92.3911 267.8059 93.2309 268.1454 93.689 267.2418 c
93.9499 266.7271 93.6403 266.3009 93.1255 266.2749 c
92.0077 266.2187 92.2903 267.385 91.8138 267.9035 C
91.8065 267.8968 91.6545 267.761 Y
f
491.916 339.9024 m
492.3592 343.1497 494.851 345.3769 496.0734 348.2663 C
498.9857 355.1509 499.7273 362.2511 498.9717 369.5936 C
502.3889 361.3748 498.947 346.891 491.916 339.9024 C
f
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
