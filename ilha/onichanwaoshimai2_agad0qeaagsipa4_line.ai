%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 24.1.1
%%For: (Overflow Cat) ()
%%Title: (onichanwaoshimai2_agad0qeaagsipa4_line.ai)
%%CreationDate: 7/13/2020 8:22 PM
%%Canvassize: 16383
%%BoundingBox: 50 138 564 652
%%HiResBoundingBox: 50.5 138.4758 563.5 651
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([\714\727\660\746\711\653])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 8.36221 -24.9751 603.6822 816.9449
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -611 854 1 1848 901 26 0 0 67 124 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 13574 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0CFF7DA8FD19FF7DFD4FFF7DA8FD12FF527DFD19FFA87DFD50FF
%52FD11FF7D7DFD1BFF7DFD3BFFA8FD14FFA852FD0FFF7D52FD1BFFA87DFD
%3BFF7D7DFD14FF52A8FD0DFFA827FD1CFFA87DFD3CFF52A8FD13FFA87DFD
%0CFF7D527DA8FD0FFFA87DFD0AFF7D7DFD3CFFA852FD14FF52FD0BFF527D
%FF52FD10FF7D7DFD0AFFA87DFD3DFF52A8FD13FFA852FD08FFA8527DFF52
%A8FD0FFFA852FD0BFF7DA8FD3EFF52FD14FF527DFD06FFA852A8FFA87DFD
%10FF52FD0CFF7DA8FD3EFF7D7DFD13FFA87DFD05FF7D52A8FFFF7D7DFD0F
%FF7D7DFD0CFF7DA8FD3FFF52A8FD13FF2752A8FFFF527DFD04FF52FD10FF
%7DA8FD0CFF7DA8FD3FFF7D7DFD13FF7D5227A8527DFD04FF52A8FD0FFFA8
%52FD0DFF52A8FD40FF52FD13FF7DA8527DA8FD05FF7DFD10FF7DA8FD0DFF
%7DA8FD40FF7D7DFD13FF52FF7DFD05FF7D7DFD0FFFA87DFD0EFF52FD41FF
%A852FD13FF52A8FD06FF52FD10FFA87DFD0EFF7DFD1DFFA8A8FD23FF7DA8
%FD12FF7DA8FD05FF7D7DFD10FF52A8FD0DFFA852FD1DFF7D7DFD23FFA852
%FD12FFA87DFD05FF7DA8FD10FF7DFD0EFF27A8FD1EFF7DFD24FF7DFD12FF
%A87DFD05FF52FD10FFA852FD0DFF52527DFD1DFFA87DFD24FF7DA8FD12FF
%52FD04FFA87DFD10FF7DA8FD0CFF7D7DFF7DFD1DFFA827FD24FFA87DFD12
%FF7DA8FFFFFFA87DFD10FF7DA8FD0BFFA852A8FF52FD1DFF7D5252FD23FF
%A87DFD12FF52A8FFFFFF7DA8FD10FF52FD0CFF7D7DFFFF7DFD1DFF7DA87D
%FD24FF7DFD12FFA87DFFFFFF7DA8FD0FFFA87DFD0CFF52FFFFFF52FD1DFF
%52FF7DA8FD23FF7D7DFD11FFA87DFFFFFF52FD10FFA87DFD0BFF7DA8FFFF
%FF7DA8FD1BFFA87DFFA852FD13FFA8FD0FFFA87DFD12FF52FFFFA87DFD10
%FF52A8FD0AFFA852FD04FF52A8FD1BFFA852FFFF52A8FD11FF7D7DFD0FFF
%A852FD12FF7DFFFFFF52FD10FF7DFD0BFF7D7DFD04FF7DA8FD1BFFA8A8FF
%FF7DA8FD12FF52FD10FF7DFD12FF52FFFF7D7DFD10FF52FD0BFF52FD05FF
%7DA8FD1BFF7D7DFFFFFF52FD12FF7DA8FD0FFF52FD12FF7DFFFFA8A8FFFF
%FFA8FD0BFFA87DFD0AFF7DA8FD05FFA87DFD1BFF52FD04FF7DA8FD11FF7D
%A8FD0FFF7DA8FD11FF52FFFF52A8FFFF7D7DFD0BFFA87DFD09FFA852FD06
%FF7D7DFD1AFFA87DA8FFFFFF7D7DFD11FFA852FD0FFF7DA8FD11FF7DFFFF
%7DFFFFFF7DA8FD0BFF7DA8FD09FFA87DFD07FF7DFD1BFF7DFD05FF52FD12
%FF7DFD0FFFA87DFD11FF52FFFF52FFFFFF52FD0CFF7DA8FD09FF52FD07FF
%A87DFD1AFF7D7DFD05FF7D7DFD11FF52A8FD0EFFA87DFD11FF7DFF7D7DFF
%FFFF7DFD0CFF52FD09FFA87DFD08FF52FD1AFF7DA8FD06FF52FD11FFA87D
%FD0FFF7DFD11FF52FF7D52FFFFA852FD0CFF7DA8FFA8FD06FF7D7DFD08FF
%7DA8FD19FF52FD07FF7D7DFD10FFA87DFD0EFFA87DFD11FF7DFFA87DFFFF
%A87DFD0CFF7DFFFF7D52A8A8FFFFFF52FD09FF52FD19FFA87DFD08FF52FD
%11FF7DFD0FFF7DFD11FF52FFA87DFFFFA87DFD0BFFA87DFFFFFFA87D7D52
%7D5252FD09FF7D7DFD04FFA8A8FD12FFA87DFD08FF7D7DFD10FF7DA8FD0E
%FF7DA8FD10FF7DFF7DA8FFFF7DA8FD0CFF7DFD07FFA852527D7D7D527D7D
%A8A8FF7DA8FD04FF7DA8FD12FF7DA8FD08FFA87DFD10FF52FD0FFF7DA8FD
%12FF7DA8FFFF7DA8FD0BFFA87DFD07FFA852FFFFFFFD04A87D7D5252277D
%52A8FFA852FD12FF7DA8FD09FF7D7DFD0FFF7D7DFD0EFF7D7DFD12FF7DFF
%FFFF7DFD0DFF7DFD07FF7DA8FD0AFFA87DFFFFA8FFFF7DFD12FF52FD0BFF
%52FD0FFF7DA8FD0EFF7DA8FD12FF7DA8FFFF7DA8FD0BFFA87DFD06FFA87D
%FD0CFF52FD05FF52A8FD0EFFA8FFA87DFD0BFF7D7DFD0EFFA87DFD0EFFA8
%7DFD12FF7DFFFFFF7DFD0CFFA87DFD06FFA87DFD0CFF7DA8FD04FF7D7DFD
%0EFFA8527D7DFD0CFF52A8FD0DFFA87DFD0EFFA87DFD12FF7DA8FFA87DFD
%0CFFA87DFD06FF52A8FD0CFF7D7DFD04FF7D7DFD0FFF7DF87D7DFD0BFF7D
%7DFD0EFF52FD0FFF52FD12FF7DFFFFA87DFD0DFF7DFD05FFA87DFD0EFF7D
%FD05FF7DFD0FFFA87DFFA852FD047DFD07FF52FD0EFF7DFD0FFF7DFD11FF
%A87DFFFF527DFD0CFFA87DFD05FFA87DFD0DFFA87DFD04FFA87DFD0FFF7D
%7DFFFFFFA8FFA87D527D527D7DA8A8A852FD0DFF52FD0FFF52FD12FF7DFF
%FF277DFD0DFF7DFD05FF52FD0FFF52FD04FFA852A8FD0EFF52FD09FFA8FF
%A8A87D7D7D277DA8A8FD0AFF7DA8FD0EFF7DA8FD0FFF7DA87DFF7D527DFD
%0CFFA8FD05FFA852FD0FFF7D7DFFFFFF52A852FD0DFFA87DFD10FFA82752
%7D527D527D7DA8A8FFFFFF52FD0FFF52FD10FF7DFF7DFF7DA87DFD12FFA8
%7DFD0FFFA87DFFFFFF7DFF7DA8FD0CFFA87DFD11FF7DA8FFFFA8FFA8A87D
%7DA8FFA87DFD0FFF7DA8FD0FFF52A87DA87DA87DFD12FF52FD11FF52FFFF
%FF52FFA87DFD0CFF52FD13FF52A8FD06FFA8FFFFFF52FD0FFF52FD10FF7D
%FF7D7D7DFF7DFD0DFF7DFFFFFFA87DFD11FF7DA8FFFF7DA8FF52FD09FFA8
%A8A87DFD14FF52FD09FFA87DFD0FFF7DA8FD0FFF52A87D52FFA87DA8FD0B
%FFA87DA8FFFF7D7DFD09FFA8FD07FF7D7DFFFF52A8FF7D7DFD09FF7D7D7D
%FD14FF7D52FD09FF52FD0FFF52FD10FF7DFF277DFFFF7DFD0DFF7DFFFFFF
%A8FD09FF7D7D527D7DFD05FF52FFFF7DA8FFFF7DFD08FFA87D52FD16FF7D
%A8FD07FFA87DFD0FFF7DA8FD0FFF52FF52A8FFFF7DA8FD0CFF7DA8FFFFFF
%7DA8FD0AFFA8FD06FF52A8FF7DA8FFFF7D7DFD08FF277DFD16FFA852FD08
%FF52FD0FFF52FD10FF7DFF52FFFFFF7DA8FD0CFF7DFFFF7D7DA8A8FD11FF
%7DA8FFA87DFFFFFF52FD08FF7DA8FD17FF7D7DFD17FF7DA8FD0FFF52A87D
%FFFFFF7D7DFD0CFF7DA8FF52FFA87D527D527D7DA8A8FD0AFFA852FF7DA8
%FFFFFF7D7DFD07FF52FD19FF52A8FD16FF52FD10FF52FFA8FFFFFF7DA8FD
%0CFF7DFFA852527DA8FFFFFFA8A87D7D527D7DFD08FF7DFFA87DFD04FF52
%FD06FFA87DFD1AFF52FD16FF7DA8FD0FFFA8FD05FFA852FD0CFF7DA87D52
%A8FD0AFFA87D52A8A87D7DA8FFFF7DA8A87DFD04FF7D7DFD05FFA87DFD1A
%FFA852FD15FF52FD16FFA87DFD0CFF7DA87DFD0FFF277D7DA852A8FFFF7D
%FF7DFD05FF52FD05FFA8A8FD1BFF7D7DFD14FF7DA8FD16FF52FD0CFFA852
%7DA8FD0EFF7D7DFFFFFF527DFF7D7D7DFD05FFA852FD04FFA87DFD1CFF52
%7DFFFFFF7DFD0FFF52A8FD16FF7DA8FD0BFFA87D7DFD0DFF52A8FF527DFF
%FFFFA8FFA8A87DFD06FF7DA8FFFFFFA8A8FD1DFF52A8FFA87DFD0FFF7D52
%7DA8FD14FF7D7DFFFF7DFD09FF527DFD0AFF7DA852527DA8FF52A8FD06FF
%7DA8FD05FFA852FFFFFFA87DFFFFFFFD05A8FFA8FD13FFA852FFFF52FD0F
%FF52FFA852A8FD13FFA87DFFFF7DFD09FFA852FD0AFF5252A87D7DA8FFA8
%7DFD06FF7DFD07FF7D7DFFFF7DA8FFFF7D7D527D7D7D527D527D7DA8FD10
%FF7D7DA87DFD0FFF7DFFFFA852FD13FFA87DA8FF52A8FD09FF7DA8FD09FF
%52FF7D7D52FFFFFF52A8FD05FF7DA8FD07FF527DFFA87DFFA8A8FD06FFA8
%FFA8A87D7D52A8FD0EFF7D27A8FD0FFF52FFFFFF7D7DFD13FF7DA8FFA87D
%FD09FF52FD0AFF7DFF7D7DA8FFFFFF7DA8FD05FF7DFD09FF52FF7DA8FD0F
%FFA8527DA8FFA8A87DA8FD08FF52FD10FF7DA8FFFFFF52FD13FFA87DFFFF
%7DA8FD08FF7D7DFD09FF7DA87D7D7DFFFFFF52FD10FFA8527DA8FD10FF7D
%7D7D27527DA8527D527DA8FD04FF7DA8FD0FFF5252A8FFFF7D7DFD13FF7D
%FFFF7D7DFD08FFA87DFD09FFA8A8A87D7DFFFF5252FD11FFA827FD10FF7D
%7DFFFFFF7DFD05FF7D7D52A8FFFF7DFD0FFFA87DA87DFFFFA87DFD13FF52
%A8FFFF52FD09FF52FD09FFA87DA87D7DFFFD047DFD1EFFA8A8525227FD04
%FF7DA8FD07FF527DA87DFD10FF52FF52A8FFFF52FD13FFA87DFFFFA8A8FD
%08FF7DA8FD09FF7DFF527DFF7DA8FF52FD1EFFA87D7D52FFA87DA8FFA852
%FD08FF7D7D7DFD0FFFA87DFFA87DFFFF7DA8FD13FF7DA8FF7D7DFD08FF7D
%A8FD09FF7DA87DF8FF7DA8FF7DFD1EFF7DA85252A8527D52A8A8277DFD08
%FF52A8FD10FF52FFA87DFFFF52A8FD13FF7DA8FF7D27FD08FFA87DFD09FF
%7D7DFF7D7DFFFFFF52FD1EFFA852527DA87DFF7DFF7DA87DFD08FF7DA8FD
%0FFFA87DFFFF52FFFF7DA8FD13FFA852FF52A827FD07FFA87DFD0AFF52FF
%FF7D52A8527DFD1EFFA85252A87DA8FF527DA87D7DA8FD07FF52FD10FFA8
%52FFFFA8A8FF7DA8FD14FF7DA87DFFFF52FD07FF7DFD0AFFA852FFFFA8A8
%7D7DFD1FFF52FD04A8FFA87DA8A87DFD07FFA87DFD04FF7DFD0BFFA87DFD
%05FFA87DFD14FF7D527DFFFFA852FD06FF7D7DFD0AFF7D7DFFFFFF52A8FD
%1FFF7D52A87DA8FFFF52A87D7DA8FD06FF7DA8FFFFFF7D7DFD0BFFA87DFD
%05FF7DA8FD15FF5252FFFFFF5252FD05FFA87DFD0BFFA8527D52A8FD20FF
%A827A8A87DFFA8527DA87DFD07FF52FFFFFFA852FD0CFFFD04A8FFFFFFA8
%7DFD16FF52FFFFFF7D7D52FD05FF52FD0DFFA8FD23FF52FFA87DFF7D5252
%7D7DA8FD05FFA87DFFFFFF7D7DFD0CFFA87DA87DFFFFFF7DA8FD16FFA8FF
%FFA87DFF7D52FD04FF7DA8FD30FF7DA8FF7D7D7DA827A87DFD06FF7D7DFF
%FFFF52FD0DFF7DA8A8A8FFFFFF7DA8FD19FFA852FFFF7D52FFFFFF7D7DFD
%30FF7D7DFFFF7DFF7D52A87DFD06FF52FFFFFF52A8FD0DFF7DA87D7DFFFF
%FF52FD1AFFA87DFFFFFF7D52FFFFFF52FD31FF527DFFFFFF7DA87DA8FD05
%FFA87DFFFF7D52FD0EFF7DFF7DA8FFFFA87DFD1AFFA87DFD04FFA827A8FF
%7D7DFD31FF527DA87D527D7DFD06FF7D7DFFA85252FD0EFF7D7D7DFFFFFF
%7D7DFD1AFFA87DFD06FF52A8FF7DFD32FFFD047DA8FD07FF52FFFF527D7D
%FD0EFF7D7DA8FFFFFF52FD1BFFA87DFD07FF527D52A8FD3CFFA87DFF7D7D
%FF52FD0EFF5252FFFFFF7DA8FD1BFF7DA8FD08FF522752FD3CFF7DA8A852
%FFA87DFD0EFF52FD04FF7DA8FD1BFF7D7DFD08FF7DA8A8A8FD3AFFA852A8
%52FFFFA87DFD0DFFA87DFD04FF52FD1CFF7DFD09FF7DA8FD3CFF7D7D52FF
%FFFF7DA8FD0EFF7DFFFFFF7D52FD1CFF7DA8FD08FFA87DFD3BFFA85252A8
%FFFFFF7D7DFD0DFF7D7DFFFF275252A8FD1BFF7DFD09FFA87DFD3BFFA827
%FD05FF7DA8FD0DFFA87DFF52A87DA87DFD1AFFA87DFD0AFF52FD3AFFA827
%FD06FF7DA8FD0DFF7DA8A87DFF7DA87DFD1BFF7DFD0AFF7DA8FD39FFA8FD
%07FF7DFD0EFFA8A8A87DFF7DFF7DFD1AFFA87DFD0AFFA87DFD40FFA87DA8
%FD0FFF52A8FF7DA87DFD1AFFA87DFD0BFF52A8FD40FF7DFD10FF7DA8FF7D
%FF5252FD19FF7DA8FD0CFF27FD3FFFA87DFD10FF52FFA87DA87D7D7DFD18
%FF7DA8FD0CFFA852FD36FFA8FD07FFA87DFD0FFFA87DFFFF7D7D27FF7DFD
%18FF52FD0EFF7D7DFD34FFA852FD07FF52A8FD0FFFA852FFA87D5252A87D
%A8FD17FF7DFD0EFFA87DFD35FF7D7DA8FD04FF7D52FD10FFA87DFFFF7D7D
%52FF7DA8FD16FFA852FD0EFFA8277D7DFD33FFA87DA8FFFFFF7D5252FD10
%FF7D7DFFA8FD047DA87DFD16FFA87DFD0EFF52FFFF7D52FD27FFA8FD0FFF
%A852FF7DA8FD0FFF7DA8FFFF7DA87DA8FF7DFD16FFA87DFD0DFF52A8FFFF
%FF7D52FD15FFA8FFA8A87DA87DA87DA87DFF7D7D527D527D527DFD0CFFA8
%52A8FF52FD0BFFA87DFFFFFFA87DFF7DA87D7D7DFF527DFD15FF7DA8FD0D
%FF7DFD05FFA852FD11FFA87D527D7D7D52A87DA87DA87DA8A8FFFFFFA8FF
%FFFF52A8FD0AFF7D52FFFF7DA8FD0CFF7DFFFFFFA87DA8FFA87D277D52A8
%7D7DFD14FF7DA8FD0CFFA852FD06FFA852FD0FFF7D52A8FFA8FD12FF7D7D
%FD09FF5252A8FFFF7D7DFD0BFF7D7DFD04FF275252FD047DFFFFFF5252A8
%FD12FF52FD0DFF7DA8FD07FF7DA8FD0EFF7DFD06FFA8FFFD04A87DA87DA8
%7DA87DA87D7D52FD09FF527DFD04FF52FD0CFFA87DFFFFFF7D7DFD0AFFA8
%527DFD10FFA87DFD0DFF7D7DFD07FF7D7DFD0EFFFD047D527D527D52FD04
%7DA87DA87DA87DA87DA8A8FD08FF7D52A8FD04FFA87DFD0CFF52A8FFFFA8
%52FD0DFF7D52A8FD0EFFA87DFD0DFF52FD09FF52FD0FFFA8A8A8FFA8FD17
%FFA87D7DFD06FFA87DFD0CFF7DA8FFFF7DA8FD0FFF7D7DA8FD0CFF7D7DFD
%0CFFA87DFD09FF7D52FD29FF5252A8FD07FF7D7DFD0CFF52FFFFA852FD11
%FFA87DFD0CFF7DA8FD0DFF7DFD0AFF7D7DFFA8FFA8FFA8FFA8A87D7DA8FD
%19FFA87D52A8FD09FF7DA8FD0BFFA87DFFFF52FD09FFA8A8A8FFA8FFA8FF
%A8FD0EFF52A8FD0CFF7D7DFD0AFF52527D7D527D527D527D7DA8A87DA87D
%5252A8FD12FFA852527DFD0BFF52FD0CFF7D7DFF7D7DFD08FF527D7D7D52
%7D527D527D527DFD0BFF7D7DFD0DFF7DA8FD0AFF7DFD0CFF2752A8FFA852
%FD10FF7D7D52A8FD0CFFA87DFD0CFF52FFFF52A8FD07FFA87DFD15FFA827
%52FD0DFF52FD0AFF7D7DFD0BFF527DFD04FF277D527D7DA8FD08FF7D7D52
%7DA8FD0EFFA87DFD0BFFA87DFF7D52FD09FF52FD15FF7DA87DFD0DFF7DFD
%0AFF52FD0AFFA852A8FD04FF7D7DA8FFA8A87D7D7DFFA8A87D7D527DA8FD
%11FF7DA8FD0EFF52FD0AFF7DFD14FF7D7DA852FD0CFFA87DFD09FF7D7DFD
%09FF7D52FD05FF7D52FF7D7DFFFFFFA8A8277D7DA8A8FD14FF7DA8FD0DFF
%7D7DFD0AFF52FD14FF52FF7DA8FD0CFF7DA8FD09FF52FD08FFA8527DFD05
%FF7D7DFFFFA87DFD05FF7DFD18FF52FD0EFF7DFD0BFFA852A8FD067DA8FD
%0AFF7D7DFF7DA8FD0CFF7DA8FD08FF7D7DFD07FF7D52A8FD05FF7D52FFFF
%FF7D7DFD05FF52FD17FFA87DFD0DFFA87DFD0CFFA87DFD05A827A8FD0AFF
%7DA8FF7DFD0DFF52FD08FFA852FD0FFFA852FD04FF527DFD05FFA852FD16
%FFA87DFD0DFF7DA8FD12FF52A8FD0BFF52FFA87DFD0BFFA87D7DFD07FFA8
%52FD0FFFA87DFD04FFFD047DFD05FFA852FD15FF7DA8FD0CFFA87DFD12FF
%52A8FD0BFF7DA8FFA87DFD0BFF7D7DA8FD06FFA852FD16FF52A8FF52FD1C
%FF7DA8FD0CFFA87DFD11FF52A8FD0CFF52A8FF7DA8FD0AFFA87D52FD07FF
%27FD16FF7D7DFFFF7DA8FD1BFF52FD0BFFA8FF52A8FD10FF527DFD0CFFA8
%7DFFFF7DA8FD0BFF527DFD06FF52A8FD15FFA852FFFFFF7DFD1BFFA87DFD
%0BFFA8527DFD10FF52A8FD04FF7DFD08FF7DA8FFFF52FD0BFFA8527DFD05
%FF7D7DFD16FF52FFFFFFA87DFD1BFFA87DFD0BFF7D527DFD0FFF527DFD04
%FF525252FD07FF7DFFFFA87DFD0BFFA827FD05FFA852FD16FF7D7DFFFFFF
%A87DFD1BFF7DA8FD0BFF7D52FD0FFF7D7DFD04FF52A8FF7D52FD05FFA852
%FFFFA852FD0BFF7D52FD05FF52A8FD15FF7D52FD04FF52A8FD1BFF7DA8FD
%0BFF277DFD0EFFA852FD04FF527DFFFFFF7DFD05FF7DA8FFFF7DA8FD0BFF
%A8A8FD04FF7D7DFD16FFA8A8FD04FF7DFD1AFF7DA87DFD0BFFA8527DFD0E
%FF52A8FFFFFF527DFD0AFF7DA8FFFF7DA8FD0BFF52A8FD04FF52FD06FF7D
%A8FD14FFA852FD13FFA8A87D7D527D527D7D7DFD0BFF7D27FD0FFF7D527D
%FF7D7DFD0BFF52FFFFFF52FD0CFF7DA8FFFFFF7DA8FD05FFA852FD15FF52
%A8FD0AFFA8FFFD04A8FD047D52A8A8FD04FFA87DFD0BFF277DFD10FFA87D
%527DFD0BFF7D7DFFFFA87DFD0BFFA852FFFFFFA852FD06FF52FD15FFA87D
%FD08FFA87D527D527D527D7DA8A8FD09FF7DA8FD0AFFA8F8A8FD1FFF7DA8
%FFFFA87DFD0BFF7DA8FFFFFF7D7DFD05FF52A8FD15FF7DA8FD09FFA8FD12
%FF7DA8FD0AFFA852FD20FF52FFFFFF7DA8FD0BFF7DA8FFFFFF52FD05FF7D
%7DFD16FF52FD1DFF52FD0BFF52FD20FFA87DFFFFFF7DA8FD0BFF52FFFFFF
%7DA8FD05FF52A8FD15FF7D7DFD1CFFA87DFD0AFFA87DFD20FFA852FFFFFF
%52A8FD0AFF7D7DFFFFFF52A8FD05FF7DFD16FF7DA8FD1CFF527DFD0AFF7D
%7DFD20FF7DA8FFFFFF7DA8FD0AFF7DA8FFFFA87DFD15FF7DFD07FF52FD1B
%FFA87D27A8FD0AFF52FD21FF7DA8FFFFFF52FD0BFF52FFFFFF7DA8FD14FF
%7D7DFD06FF7DA8FD19FFA8527DFFA87DFD09FF7D7DFD20FFA852FFFFFFA8
%7DFD0AFFA87DFFFFFF7DFD15FF7DFD07FF7DA8FD17FF7D7D7DFFFFFF52A8
%FD09FF7DA8FD20FF7DA8FFFFFFA87DFD0AFFA87DFFFFA852FD14FFA87DFD
%07FF7DFD15FFA87D527DA8FD04FF7DA8FD08FFA87DFD1EFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Flare.aip)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (\315\274\317\361\303\350\304\241) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe \267\342\314\327\324\366\320\247\271\244\276\337) (Deform.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe \312\265\312\261\311\317\311\253\324\366\320\247\271\244\276\337) (PlanetX.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe \312\351\267\250\273\255\261\312\324\366\320\247\271\244\276\337) (CalligraphicBrushTool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe \270\264\272\317\320\316\327\264) (PathfinderS.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \315\274\260\270\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \315\274\260\270\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \322\325\312\365\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \322\325\312\365\273\255\261\312\324\366\320\247\271\244\276\337) (ArtOnPathBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \311\242\265\343\273\255\261\312\324\366\320\247\271\244\276\337) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \311\242\265\343\273\255\261\312\324\366\320\247\271\244\276\337) (ScatterBrushTool.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe \273\354\272\317\324\366\320\247\271\244\276\337) (LiveBlends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe \267\373\272\305) (ParticleSystem.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.929412 0.87924 0.890196 0.799985 ([\714\727\660\746\711\653]) 0 Xs
([\714\727\660\746\711\653])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(\315\274\262\343 1) Ln
0 A
u
u
0 R
0 G
1 J 1 j 2 w 10 M []0 d0 XR
449.5 639.5 m
462.2139 620.6791 472.8222 600.7228 479.3386 578.9517 C
483.7609 564.1769 486.2734 548.9117 488.1836 533.5228 c
489.8592 520.0233 491.3051 506.4895 492.7876 492.9767 c
493.5452 486.0722 493.8868 479.003 493.9579 471.9996 C
494.0999 458.001 493.9907 444 494.0112 430 c
494.0139 428.1632 494.1692 426.3266 494.2623 424.3066 C
504.1664 426.1663 507.5938 418.8336 511.4525 412.4712 C
516.9188 403.458 518.2507 393.2994 519.0361 383.0027 c
519.7016 374.2776 519.713 365.6135 517.9997 357.0001 C
517.0806 352.3795 514.9688 348.17 512.8907 344.0552 c
510.7747 339.8652 508.9876 335.8623 508.8188 331.0063 C
508.7369 328.6487 507.1091 325.921 503.9963 325.5297 c
500.3443 325.0707 499.2375 322.4834 497.9277 319.5321 C
493.4559 309.4551 492.9824 298.7297 491.8364 288.0175 C
491.1658 281.7491 490.3392 275.7375 493.5553 270.0312 c
494.4424 268.4572 493.521 267.3824 492.9368 266.544 C
484.0175 253.7437 477.9106 239.3579 469.9373 226.0375 C
467.2044 221.4718 466.7325 216.3105 464.9982 211.5006 C
459.9158 197.4052 455.5132 183.0505 449 169.5 C
S
328.5 578 m
332.7037 573.8728 333.576 568.0788 335.3468 562.9471 C
345.1422 534.5604 358.2367 507.707 373.6604 482.0966 C
388.6534 457.2015 405.6445 433.5715 424.1212 411.0997 C
426.904 407.7152 425.9317 404.4844 425.3521 401.529 C
420.9223 378.9441 414.9019 356.7824 405.9473 335.5222 C
404.1308 331.2094 402.4842 326.7638 399.5807 322.9387 C
399.0189 322.1985 399.5 320.6667 399.5 319.5 C
S
161.5 630.5 m
151.2859 615.865 145.1832 599.3841 140.0097 582.497 C
135.8013 568.7604 133.2067 554.6881 130.9184 540.5132 c
127.5965 519.9348 127.3259 499.2424 127.5 478.5 C
S
428 351.5 m
428.9628 350.1399 429.1454 348.588 428.9911 347.0009 c
427.287 329.4673 426.1808 311.8689 423.0421 294.4924 C
422.3031 290.4011 419.775 287.8663 417.1381 284.8781 C
408.415 274.9933 398.5531 266.5653 387.4879 259.519 C
365.412 245.4608 341.9982 234.806 316.0521 229.7336 C
308.7184 228.2999 303.1078 231.1632 297.0611 233.183 c
292.8985 234.5735 288.7558 235.6039 284.4923 235.8828 c
281.8421 236.0562 279.4529 236.7646 277 237.5 C
S
420 286.5 m
423.6781 283.3422 420.8696 279.5057 420.2792 276.544 C
414.649 248.3036 408.4237 220.1826 402.5371 191.9922 C
400.1456 180.5392 398.1405 169.0048 396.0339 157.4938 C
395.7787 156.0989 395.6569 155.3176 394.0789 154.3689 C
384.7677 148.7705 374.844 144.481 365.0098 139.9786 C
362.8507 138.99 360.6547 139.8224 358.5 139.5 C
S
414.5 559.5 m
418.5273 546.4735 422.5261 533.4226 424.9302 519.9875 C
426.4691 511.3875 427.0671 502.6196 428.5895 494.0158 c
429.6834 487.8338 430.1723 481.5626 429.306 475.5278 c
428.1032 467.1494 428.9127 458.8302 428.5 450.5 C
S
207 245 m
203 236.8333 198.9374 228.6962 195.0607 220.4714 C
194.4026 219.0752 193.5362 218.0075 192.4935 217.0068 C
175.7342 200.9226 164.262 181.2872 154.4992 160.5004 C
152.0172 155.2159 150.8839 149.4804 148.9302 144.025 c
148.3708 142.4627 149.4494 139.8244 146.5 139.5 C
S
99.5 238.5 m
100.9798 233.7038 99.2414 229.0606 98.3855 224.5216 c
94.8245 205.6369 90.5981 186.8769 87.0996 167.9816 c
85.3603 158.5876 84.6667 149 83.5 139.5 C
S
258.5 240 m
257.3147 240.716 257.5884 241.883 257.471 242.9969 c
257.1152 246.3711 254.3692 248.6426 251.5309 247.4277 c
243.7244 244.0862 235.4836 245.9988 227.484 245.1511 C
221.7329 244.5416 215.8049 245.7288 210.0134 245.3131 C
207.5604 245.1371 206.382 245.9453 205.5545 247.5285 c
203.0698 252.2827 200.248 256.9821 198.6505 262.0475 C
196.7203 268.1674 193.1732 272.5162 188.0376 276.0546 c
184.8353 278.261 182.2325 281.3754 178.9453 283.4118 C
174.0515 286.4435 168.3255 283.4717 166.0979 276.4689 c
164.1305 270.2842 162.7032 263.8866 161.5557 257.49 C
158.1293 238.3909 153.4016 219.6194 148.0219 200.9937 C
146.7455 196.5745 146.5011 191.8137 143.5 188 C
S
319.5 274.5 m
312 274.3333 304.4809 273.7972 297.0094 274.1825 c
294.0347 274.3358 291.1271 274.5466 288.5419 273.4051 C
284.6973 271.7073 280.9305 272.088 276.9955 272.4513 C
272.7203 272.846 268.6519 272.2258 264.9561 269.5609 c
262.4016 267.7189 260.6325 265.5242 261.606 262.5345 c
262.6777 259.2436 266.0837 258.1465 268.9757 258.6417 c
275.1392 259.697 281.5833 258.4802 287.4385 260.2083 C
293.9836 262.1399 300.5227 261.3952 307.0116 261.8254 C
318.8041 262.6072 330.6668 262.3228 342.4998 262.5111 C
344.3397 262.5403 346.1751 262.7021 348.0116 262.8808 C
351.3311 263.2039 354.3957 262.9238 355.0796 267.4881 c
355.726 271.8021 353.2176 274.1998 350.4536 276.4429 c
348.7788 277.8021 346.3935 277.2778 344.5182 276.9079 C
337.8397 275.5904 331.1841 275.9696 324.5 276.5 C
S
326.5 593.5 m
327 589.8333 327.8832 586.1699 327.9145 582.4993 C
327.9675 576.2575 326.1494 570.1739 325.2412 564.0383 C
322.5956 546.1642 318.521 528.5266 314.0657 510.9833 C
309.0955 491.4123 303.9362 471.9268 295.4652 453.516 C
292.149 446.3086 291.4276 438.7714 291.4712 430.9998 c
291.5295 420.6279 290.8785 410.2874 289.8324 399.7519 C
286.2698 400.7698 285.3354 403.8525 283.517 406.0143 C
268.3952 423.9911 257.8753 444.665 248.5083 466.0036 C
246.2565 471.1335 245.1172 476.7319 242 481.5 C
S
202 583.5 m
203.3158 582.2885 203.9143 580.8202 204.0265 579.0016 c
204.7168 567.8087 205.8699 556.656 206.8942 545.4903 C
208.561 527.32 211.1127 509.2784 215.1328 491.5301 C
220.0513 469.8159 225.7028 448.2486 234.0676 427.5273 C
234.3573 426.8096 234.3993 426.1832 234.5 425.5 C
S
136 418 m
137.5133 407.3652 139.865 396.8961 142.5431 386.5111 c
144.8349 377.6241 147.6976 368.8832 149.9434 359.9857 c
152.1114 351.3964 157.2257 344.0163 159.5494 335.5135 C
159.778 334.6769 161.5373 334.8706 161.5 333.5 C
S
268 139.5 m
271.9103 152.9191 277.4764 165.688 282.8053 178.5805 c
285.4912 185.0785 288.1559 191.7484 289.2124 198.9689 C
289.8108 203.0588 288.8634 206.7376 288.3051 210.4709 c
287.8939 213.2205 285.6122 215.5881 282 215 C
S
397.5 182.5 m
385.8333 180.3333 374.2366 177.5917 362.4803 176.1616 C
350.7108 174.7299 338.9897 172.2552 326.9976 172.9589 C
323.7324 173.1505 321.3785 170.5569 318.5 169.5 C
S
347 379.5 m
348.898 384.521 348.2023 390.2112 351.2455 394.952 C
343.9593 396.3768 342.881 395.5948 343.0319 388.5007 c
343.1994 380.6245 345.3409 373.1797 348.4793 365.991 C
348.9605 364.8889 349.3101 363.6866 349.4759 362.4966 C
350.3227 356.4194 354.2426 352.3629 358.4957 348.4953 c
360.4932 346.6788 362.8155 345.9143 365.5004 345.9836 c
368.3319 346.0567 371.1681 346.0564 373.9996 345.9839 c
376.7664 345.913 378.3442 347.7509 379.9983 349.5016 C
387.6829 357.6354 388.2694 382.1264 382.797 389.3461 C
379.1857 394.1105 376.7377 399.1625 374.5 404.5 C
S
116.5 370 m
116.1667 363.8333 115.7512 357.6697 115.5188 351.4993 c
115.1468 341.6235 114.1713 331.8036 112.9909 322.0011 c
111.8664 312.6627 110.976 303.2812 109.4141 294.0145 c
107.8114 284.5059 106.9787 274.9012 104.7804 265.4349 c
103.3996 259.4883 102.7759 253.1748 101.9767 247.003 c
101.5265 243.526 100.5072 240.6263 97.6575 237.839 C
92.3834 232.6803 89.4327 225.6885 86.6077 218.9548 C
82.8386 209.971 79.3193 200.8147 76.6269 191.4635 c
73.0621 179.0822 68.7844 166.8374 67.0527 153.9929 c
66.3525 148.7986 64.1828 144.3329 61.5 140 C
S
179.75 419.5 m
183.2345 414.9102 180.8763 409.4686 181.9118 404.4817 c
184.1398 393.7522 186.2182 383.1039 192.9396 373.9556 c
197.0256 368.3943 202.6719 367.9162 208.4846 368.626 c
213.415 369.2281 215.1 372.8445 215.1144 378.4997 c
215.1224 381.6451 216.2033 384.8015 216.704 387.9677 c
217.6076 393.6812 215.6158 397.6086 211.5 401 C
S
210.5 650 m
209.5946 649.9054 209.0818 649.4065 209.002 648.4998 c
208.1654 639.0001 207.1923 629.5096 206.5434 619.997 C
205.9987 612.0115 206.2722 603.9484 205.3394 596.0189 c
204.7573 591.0702 203.2341 586.4127 199.2305 582.2769 c
195.0333 577.9412 192.6172 571.862 189.5092 566.4946 C
180.1176 550.2758 173.3268 532.8777 166.5047 515.4982 C
158.9892 496.3521 151.7012 477.1226 145.5 457.5 C
S
234.5 517.5 m
234.5681 511.2864 237.3826 505.6142 238.0252 499.5026 c
238.5697 494.3231 240.9987 488.631 239.5552 484.1431 c
237.9502 479.1529 237.9435 474.2648 237.7353 469.4897 C
237.3809 461.3603 238.6054 453.1714 238.9738 444.9988 C
239.4553 434.3187 241.2386 423.7207 240.9708 413.0007 c
240.9269 411.2449 241.8897 409.9632 242.5 408.5 C
S
79.5 544.5 m
77.3908 533.8808 75.3 523.2672 73.8907 512.5143 c
73.3444 508.3458 73.1754 504.1244 72.7612 499.9739 c
72.2246 494.5974 70.3731 489.2352 70.7633 484.0197 c
71.1991 478.1934 71.5857 472.3409 72.0834 466.5071 c
73.2419 452.9287 74.5369 439.3877 77.3488 425.9683 c
80.3808 411.4987 85.0105 397.6417 90.5031 384.0013 c
91.9828 380.3264 93.4056 376.624 95.0352 373.0159 c
96.0214 370.8323 96.7677 368.3251 99.5 367.5 C
S
311 493.5 m
312.8423 493.5854 314.6426 493.0665 315.9613 491.9541 c
320.8188 487.8568 326.7442 487.843 332.5048 487.6265 C
334.7724 487.5412 336.4918 486.4359 338.4763 485.9105 c
348.3491 483.2964 358.5285 482.4864 368.532 480.6769 C
370.0849 480.396 371.6404 478.2371 373.5 480 C
S
529.5 650 m
534.2787 646.898 535.7824 641.3308 538.173 636.8264 c
540.8374 631.8062 542.7101 626.1044 546.1573 621.621 C
550.6314 615.8021 550.0406 608.7438 552.2673 602.4181 C
556.3906 590.7041 557.4556 578.1092 560.3394 566.0814 C
564.3983 549.1524 561.1523 532.3079 562.5 515.5 C
S
440.5 376.5 m
436.506 365.5521 430.0293 355.9926 423.4627 346.5259 C
415.4106 334.9176 406.1888 324.2961 395.5132 314.9848 C
395.0762 314.6037 394.8333 314 394.5 313.5 C
S
303.5 414.5 m
305.5981 416.539 308.2325 416.6076 310.9684 417.1572 C
322.9661 419.5674 334.3698 415.9796 346.0094 414.5784 c
352.4685 413.8009 357.8971 410.9752 363.5962 408.1974 c
367.8842 406.1075 372.856 404.064 377.9888 406.0293 C
382.123 407.6122 386.0658 406.3615 389.9906 405.4592 c
398.0833 403.5985 406.4117 402.3889 413.5133 397.5194 c
415.7792 395.9657 417.8629 394.358 418.5 391.5 C
S
154 337 m
154.0383 321.3446 158.157 307.0963 168.5022 295.0019 C
170.9709 292.1159 171.5897 288.5026 172.5 285 C
S
91.5 420.5 m
93.2764 413.1608 96.2601 406.2735 99.5379 399.5184 c
100.8705 396.7721 102.2775 394.0437 102.4462 390.997 c
102.6629 387.0808 105.1036 384.6736 107.4569 381.9626 C
118.5325 369.2039 129.4056 356.2163 143.0697 346.0941 C
147.9061 342.5114 152.2284 337.8639 158.5 336.5 C
S
505 325 m
505.9318 312.1766 505.3376 299.3329 505.5583 286.501 c
505.6291 282.3839 505.2073 278.5346 503 275 C
S
145.5 212.5 m
145.4821 207.0392 144.0254 201.7974 142.8951 196.5225 c
142.7148 195.6812 142.4472 194.8095 142.5329 194.0035 c
144.023 179.9809 137.9258 167.5126 134.4976 154.5006 C
133.1792 149.4967 131.8333 144.5 130.5 139.5 C
S
141.5 437.5 m
148.4259 443.6325 156.9613 444.7278 165.4787 443.8039 C
172.8401 443.0054 180.2528 441.9333 187.5317 440.1277 C
192.0082 439.0173 195.643 436.6074 199.4557 434.4228 c
200.9082 433.5905 201.967 432.2483 202.1552 430.0131 c
202.4192 426.8778 205.4758 425.1869 207.4949 422.9953 C
212.2037 417.8838 215.5159 412.3296 213.0012 404.9996 c
212.6592 404.0026 212.6024 402.3725 211.9586 402.0965 C
205.0881 399.1508 206.0908 393.1234 206 387.5 C
S
562.5 245 m
552.0012 245.2394 541.4968 244.5949 530.9951 245.4386 C
526.4692 245.8023 521.8725 245.6472 517.5 244 C
S
90 633 m
89.7309 625.9289 84.9332 620.6941 82.4398 614.5243 c
78.3284 604.3513 73.0541 594.582 69.7331 584.1756 c
66.788 574.9471 65.7645 565.0959 64.0193 555.4965 c
62.2648 545.8458 60.6667 536.1667 59 526.5 C
S
128.5 464.5 m
128.4397 449.6738 129.9089 435.004 133 420.5 C
S
167 515 m
173.2777 512.5946 179.8821 511.7655 186.5021 511.5737 c
194.7905 511.3335 202.75 508.819 211 508.5 C
S
472.5 276.5 m
472.4571 266.9325 469.5343 257.8275 468.0559 248.4911 C
467.3133 243.8018 465.1502 239.3779 465.5 234.5 C
S
70 483 m
66.1562 479.1236 65.6554 473.8078 64.0161 468.9945 c
61.0254 460.2128 56.8595 451.8061 55.5 442.5 C
S
516.5 243.5 m
516.3367 237.8994 517.8915 232.5065 518.5728 227.009 c
519.0053 223.5182 521.2175 222.105 525.0068 222.4168 C
532.4836 223.0321 540.0023 223.1237 547.498 223.5359 C
549.0113 223.6191 550.2201 223.047 552.1271 222.1881 C
540.2221 208.9751 526.4865 197.57 516.8486 182.7798 C
519.7088 179.1563 523.8177 178.3969 527.5295 177.0833 c
530.6982 175.9618 533.1618 176.9048 535.6361 179.8871 c
541.0432 186.4044 547.1939 192.3047 553.5164 198.9575 C
555.55 194.8422 559.2156 193.4669 561.6855 190.6634 C
562.4715 189.7712 562.0881 189.1274 562.5 188.5 C
S
562.5 481.5 m
562.5 468.1667 562.5 454.8333 562.5 441.5 C
S
102.5 650 m
101.6667 649.3333 100.5892 648.825 100.0381 647.9753 c
95.0716 640.3171 88.8917 634.1361 81.8079 628.1365 c
71.7256 619.5973 61.224 611.4851 51.5 602.5 C
S
494 404.5 m
493.25 403.6389 492.9667 402.6642 492.9806 401.4998 c
493.0838 392.8181 492.6198 384.1654 492.0892 375.4945 C
490.9855 357.455 489.7398 339.4371 487.4737 321.5033 C
487.0446 318.1078 486.1906 314.7512 488 311.5 C
S
415.5 471.5 m
410.1814 474.3124 404.1423 474.4852 398.4655 475.2415 c
392.0809 476.0921 385.7931 477.2406 379.4941 478.4698 c
378.8549 478.5945 378.0028 478.822 377.5 478 C
S
370 380.5 m
370.1667 382.3333 370.6317 384.2008 370.427 385.9917 c
370.1502 388.4134 369.284 390.9452 366.4874 391.4268 c
363.7916 391.891 361.2801 390.031 360.6494 387.9546 C
357.7969 378.5638 356.8852 369.1145 361.9608 359.9782 C
363.249 357.6594 365.0214 358.3358 366.4684 359.0628 C
370.8267 361.2524 374.2652 375.5583 371.4009 379.4267 c
371.2309 379.6563 370.1266 381.2998 369 380 C
S
380 391 m
378.3973 387.9089 378.7232 384.9906 379.1718 381.4583 C
380.0209 374.772 379.9226 367.8323 379.0707 360.9912 C
378.6192 357.3651 375.4205 355.8452 373.8442 353.0891 c
372.7068 351.1003 371.5732 349.2134 371 347 C
S
196.5 426 m
191.6936 422.9619 192.025 417.5213 190.5535 412.9827 C
188.353 406.1957 190.8901 399.5969 192.1127 393.021 c
192.565 390.5884 194.2273 388.3279 197 387.5 C
S
57.5 526.5 m
59.6107 526.8219 59.7441 525.4729 59.485 524.0026 c
57.9396 515.234 57.5027 506.3518 57.0682 497.4967 c
56.4638 485.1766 56.1992 472.8342 56.1188 460.4992 c
56.1037 458.1713 54.5315 455.8333 56 453.5 C
S
508.5 328 m
510.9653 325.3099 512.4754 322.361 512.5853 318.5024 C
512.7515 312.6691 513.3997 306.8508 513.5628 301.0157 C
513.7251 295.2075 514.9263 289.0446 515.6523 283.0183 C
516.1917 278.5409 515.7987 274.5108 514 270.5 C
S
456.5 202.5 m
454.8803 192.7061 450.3339 183.7065 448.5694 173.9874 C
446.3444 161.7319 440.4345 150.903 436 139.5 C
S
200 421 m
193.5828 412.6019 194.8757 403.2464 197.1705 394.0425 c
197.8584 391.2831 196.652 388.5963 197.9713 385.9855 c
201.5106 378.9814 205.6854 377.287 214.5 379.5 C
S
142.5 450.5 m
142.16 445.861 140.019 441.7543 138.4227 437.5292 c
136.3247 431.9759 136.6105 426.1965 136.0421 420.4958 c
135.8955 419.0257 135.9636 417.8511 134 418.75 C
S
515 305.5 m
517.9927 304.3143 519.9032 302.3252 520.5506 299.0099 C
521.1456 295.9633 522.7025 293.035 522.9013 289.9936 c
523.545 280.149 528.4745 273.508 536.3801 267.8329 C
544.558 261.9624 553.7778 258.1907 562.25 253 C
S
279.5 230.5 m
284.1526 228.8557 283.8335 225.4489 283.0556 221.4891 c
280.861 210.3174 272.7256 202.4666 267.4504 193.0277 C
265.7677 190.0171 263.5 187.3333 261.5 184.5 C
S
362 405 m
355.503 395.499 350.0195 385.6566 351.5076 373.5009 C
351.7597 371.4413 351.1569 369.6542 350 368 C
S
255.5 211.5 m
261.1667 217.3333 266.7325 223.2701 272.5512 228.9475 C
274.7814 231.1237 276.2923 233.6099 276.4159 236.5036 c
276.7291 243.8322 272.2469 246.6264 266.5122 243.9737 c
260.8937 241.3748 255.9424 237.6952 250.9829 234.023 C
243.8831 228.7661 236.6667 223.6667 229.5 218.5 C
S
512 298.5 m
509.0374 295.1692 510.3255 291.0682 510.6863 287.5189 c
511.2362 282.1096 510.9646 277.0249 509 272 C
S
225.5 426.5 m
224.485 426.3793 223.6552 426.7362 223.0014 427.5012 C
215.911 435.7977 212.2046 436.7026 202.5 432.5 C
S
139.5 521.5 m
146.6639 518.989 153.9583 517.01 161.4964 515.9735 c
162.5228 515.8324 163.5 515.3333 164.5 515 C
S
499.5 368.5 m
500.2392 358.5512 498.8417 349.1809 492.5834 340.9367 c
491.7655 339.8592 491.182 339.4189 490 339.5 C
S
194.5 180.5 m
188.8376 172.914 183.6985 165.0009 179.5 156.5 C
S
494 423.5 m
493.6667 419.5 493.2499 415.5047 493.0235 411.4987 c
492.7973 407.4957 495.4813 405.3517 498.5 403.5 C
S
499.5 403 m
503.4358 396.3736 505.5089 389.2273 505.5 381.5 C
S
524.5 274 m
521.5275 270.7577 517.8317 269.946 513.5013 269.8918 C
507.1628 269.8124 500.8333 269 494.5 268.5 C
S
310 228 m
309.5 226 308.8538 224.0217 308.5527 221.9922 c
308.3596 220.6904 308.2532 219.4618 309.9371 218.4002 c
312.8844 216.5423 315.6224 214.214 316.5 210.5 C
S
428.5 428.5 m
428.5238 422.381 428.3239 416.293 426 410.5 C
S
389.5 296.5 m
389.5871 295.4985 388.5539 295.0779 388.3983 294.0149 c
387.9905 291.2289 387.2599 288.2638 390.0595 286.6001 c
392.4398 285.1855 395.2178 285.5334 397.5 287.5 C
S
103 385 m
100.9693 383.2939 100.2275 381.0972 100.4978 378.4998 c
101.0863 372.846 99.2138 367.119 101 361.5 C
S
201.5 455.5 m
195.7322 455.3071 190.299 457.9579 184.5 457.5 C
S
394.5 154 m
396.1874 149.1027 393.2236 144.3658 394 139.5 C
S
292.5 464.5 m
292.7659 459.8369 291.9276 455.1343 293 450.5 C
S
241.5 153.5 m
239.1667 148.8333 236.8333 144.1667 234.5 139.5 C
S
374 370.5 m
376.5523 367.5669 375.5358 364.2532 374.9918 361.0014 c
374.7396 359.4934 374.0248 358 375 356.5 C
S
225.5 506.5 m
221.1985 508.7865 216.6751 509.0761 212 508 C
S
192 422 m
187.8776 421.6013 185.3625 418.2803 182 416.5 C
S
302.5 499.5 m
304.1612 496.6095 305.2532 493.106 309.5 493 C
S
562.5 602 m
559.2915 603.0511 557.9795 605.8953 556.5326 608.518 c
555.1219 611.075 553.3629 613.108 550.5 614 C
S
152.5 450 m
150.5735 451.0492 148.4944 450.2664 146.5 450.5 C
S
357 398 m
354.8529 398.1961 352.7924 398.1542 351.5 396 C
S
560.5 608.5 m
559.3333 608.9086 558.1667 609.5393 557 608.5 C
S
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
